{"version":3,"file":"static/js/88.a9e72bc4.chunk.js","mappings":"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","sources":["components/AddNewProgram.js","components/EditProgram.js","components/DeleteProgram.js","components/ProgramTypes.js","components/Spinner.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import './AddNewProgram.css';\n\n// function AddNewProgram({ onClose, onAddProgram, onFetching }) {\n//   const [formData, setFormData] = useState({\n//     title: '',\n//     description: '',\n//     selectedRules: []\n//   });\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     const selectedRules = selectedOptions.map(option => option.value);\n//     setFormData({ ...formData, selectedRules });\n//   };\n\n//   const [rules, setRules] = useState([]);\n\n//   useEffect(() => {\n//     fetchRules();\n//   }, []);\n\n//   const fetchRules = async () => {\n//     try {\n//       const response = await fetch(`/list_rules`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data.map(rule => ({ value: rule[1], label: rule[1] })));\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     }\n//   };\n\n//   const handleAdd = async () => {\n//     const { title, description, selectedRules } = formData;\n//     if (title && description && selectedRules) {\n//       try {\n//         const response = await fetch(`/add_program`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify({ name: title, description, rules: selectedRules })\n//         });\n//         const data = await response.json();\n//         if (data.status === 'SUCCESS') {\n//           alert('Program added successfully!');\n//           onAddProgram([title, description, selectedRules]);\n//           onFetching();\n//           onClose();\n//         } else {\n//           alert('Failed to add program: ' + data.data);\n//         }\n//       } catch (error) {\n//         console.error('Error adding program:', error);\n//         alert('Error adding program');\n//       }\n//     } else {\n//       alert('Please enter both title and description');\n//     }\n//   };\n\n//   return (\n//     <div className=\"add-new-program-overlay\">\n//       <div className=\"add-new-program\">\n//         <div className=\"add-new-program-header\">\n//           <div>Add New Product</div>\n//           <button className=\"add-new-program-close\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <div className=\"add-new-program-body\">\n\n//           <div className=\"floating-label-input \">\n//             <input\n//               type=\"text\"\n//               name=\"title\"\n//               value={formData.title}\n//               onChange={handleChange}\n//               required\n//               placeholder=\" \"\n//             />\n//             <label>Product Title*</label>\n//           </div>\n\n//           <div className=\"floating-label-input\">\n//             <input\n//               type=\"text\"\n//               name=\"description\"\n//               value={formData.description}\n//               onChange={handleChange}\n//               required\n//               placeholder=\" \"\n//             />\n//             <label>Description*</label>\n//           </div>\n\n//           <div className=\"select-container\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"rules\"\n//               options={rules}\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search \"\n//               required\n//             />\n//             <label>Select Rules*</label>\n//           </div>\n\n//         </div>\n        \n//         <div className=\"add-new-program-footer\">\n//           <button className=\"add-new-program-add\" onClick={handleAdd}>Add</button>\n//           <button className=\"add-new-program-cancel\" onClick={onClose}>Cancel</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AddNewProgram;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport './AddNewProgram.css';\n\nfunction AddNewProgram({ onClose, onAddProgram, onFetching }) {\n  const userLocalData = JSON.parse(localStorage.getItem('userData'));\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    selectedRules: [],\n    created_by: `${userLocalData[1]} ${userLocalData[2]}`,\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleRuleChange = (selectedOptions) => {\n    const selectedRules = selectedOptions.map(option => option.value);\n    setFormData({ ...formData, selectedRules });\n  };\n\n  const [rules, setRules] = useState([]);\n\n  useEffect(() => {\n    fetchRules();\n  }, []);\n\n  const fetchRules = async () => {\n    try {\n      const response = await fetch(`/list_rules`);\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        console.log(\"Rule in Edit COMP: \", data.data);\n        setRules(data.data.map(rule => ({ value: rule.rulename, label: rule.rulename })));\n      } else {\n        console.error('Failed to fetch rules:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching rules:', error);\n    }\n  };\n\n  const handleAdd = async () => {\n    const { title, description, selectedRules, created_by } = formData;\n    if (title && description && selectedRules.length > 0) {\n      try {\n        const response = await fetch(`/add_program`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: title,\n            description,\n            rules: selectedRules,\n            created_by\n          })\n        });\n        const data = await response.json();\n        if (data.status === 'SUCCESS') {\n          alert('Program added successfully!');\n          onAddProgram([title, description, selectedRules, created_by]);\n          onFetching();\n          onClose();\n        } else {\n          alert('Failed to add program: ' + data.data);\n        }\n      } catch (error) {\n        console.error('Error adding program:', error);\n        alert('Error adding program');\n      }\n    } else {\n      alert('Please enter title, description, and select at least one rule');\n    }\n  };\n\n  return (\n    <div className=\"add-new-program-overlay\">\n      <div className=\"add-new-program\">\n        <div className=\"add-new-program-header\">\n          <div>Add New Product</div>\n          <button className=\"add-new-program-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <div className=\"add-new-program-body\">\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              required\n              placeholder=\" \"\n            />\n            <label>Product Title*</label>\n          </div>\n\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              required\n              placeholder=\" \"\n            />\n            <label>Description*</label>\n          </div>\n\n          <div className=\"select-container\">\n            <Select\n              isMulti\n              closeMenuOnSelect={false}\n              name=\"rules\"\n              options={rules}\n              className=\"basic-multi-select\"\n              classNamePrefix=\"select\"\n              onChange={handleRuleChange}\n              placeholder=\"Search \"\n              required\n            />\n            <label>Select Rules*</label>\n          </div>\n        </div>\n        <div className=\"add-new-program-footer\">\n          <button className=\"add-new-program-add\" onClick={handleAdd}>Add</button>\n          <button className=\"add-new-program-cancel\" onClick={onClose}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddNewProgram;\n","// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import './EditProgram.css';\n\n// function EditProgram({ onClose, program, onEditProgram }) {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rules, setRules] = useState([]);\n\n//   useEffect(() => {\n//     if (program) {\n//       setTitle(program[0]);\n//       setDescription(program[1]);\n//       fetchMappedRules(program[2]); // Assuming program[2] is the program ID\n//     }\n//   }, [program]);\n\n//   useEffect(() => {\n//     fetchRules();\n//   }, []);\n\n//   const fetchRules = async () => {\n//     try {\n//       const response = await fetch(`/list_rules`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data.map(rule => ({ value: rule[1], label: rule[1] })));\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     }\n//   };\n\n//   const fetchMappedRules = async (programId) => {\n//     try {\n//       const response = await fetch(`/get_mapped_rules`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ program_id: programId })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setSelectedRules(data.data.map(rule => ({ value: rule[1], label: rule[1] })));\n//       } else {\n//         console.error('Failed to fetch mapped rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching mapped rules:', error);\n//     }\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedRules(selectedOptions);\n//   };\n\n//   const handleEdit = async () => {\n//     if (title && description) {\n//       try {\n//         const response = await fetch(`/edit_program`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify({\n//             program_id: program[2],\n//             name: title,\n//             description,\n//             rules: selectedRules.map(rule => rule.value)\n//           })\n//         });\n//         const data = await response.json();\n//         if (data.status === 'SUCCESS') {\n//           alert('Program edited successfully!');\n//           onEditProgram([title, description, program[2]]);\n//           // fetchMappedRules();\n//           fetchRules();\n//           onClose();\n//         } else {\n//           alert('Failed to edit program: ' + data.data);\n//         }\n//       } catch (error) {\n//         console.error('Error editing program:', error);\n//         alert('Error editing program');\n//       }\n//     } else {\n//       alert('Please enter both title and description');\n//     }\n//   };\n\n//   return (\n//     <div className=\"edit-program-overlay\">\n//       <div className=\"edit-program\">\n//         <div className=\"edit-program-header\">\n//           <div>Edit Product</div>\n//           <button className=\"edit-program-close\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <form className='edit-program-form'>\n//           <div className=\"edit-program-form-row\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 value={title}\n//                 onChange={(e) => setTitle(e.target.value)}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Product Title*</label>\n//             </div>\n//           </div>\n//           <div className=\"edit-program-form-row\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Description*</label>\n//             </div>\n//           </div>\n//           <div className=\"select-container\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"rules\"\n//               options={rules}\n//               value={selectedRules}\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Select Rules\"\n//               required\n//             />\n//             <label>Select Rules*</label>\n//           </div>\n//         </form>\n//         <div className=\"edit-program-footer\">\n//           <button className=\"edit-program-save\" onClick={handleEdit}>Save</button>\n//           <button className=\"edit-program-cancel\" onClick={onClose}>Cancel</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default EditProgram;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import './EditProgram.css';\n\n// function EditProgram({ onClose, program, onEditProgram, fetchPrograms }) { // Add fetchPrograms as a prop\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const [rules, setRules] = useState([]);\n\n//   useEffect(() => {\n//     if (program) {\n//       setTitle(program[0]);\n//       setDescription(program[1]);\n//       fetchMappedRules(program[2]); // Assuming program[2] is the program ID\n//     }\n//   }, [program]);\n\n//   useEffect(() => {\n//     fetchRules();\n//   }, []);\n\n//   const fetchRules = async () => {\n//     try {\n//       const response = await fetch(`/list_rules`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data.map(rule => ({ value: rule[1], label: rule[1] })));\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     }\n//   };\n\n//   const fetchMappedRules = async (programId) => {\n//     try {\n//       const response = await fetch(`/get_mapped_rules`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ program_id: programId })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setSelectedRules(data.data.map(rule => ({ value: rule[1], label: rule[1] })));\n//       } else {\n//         console.error('Failed to fetch mapped rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching mapped rules:', error);\n//     }\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedRules(selectedOptions);\n//   };\n\n//   const handleEdit = async () => {\n//     if (title && description) {\n//       try {\n//         const response = await fetch(`/edit_program`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify({\n//             program_id: program[2],\n//             name: title,\n//             description,\n//             rules: selectedRules.map(rule => rule.value)\n//           })\n//         });\n//         const data = await response.json();\n//         if (data.status === 'SUCCESS') {\n//           alert('Program edited successfully!');\n//           onEditProgram([title, description, program[2]]);\n//           // Fetch the updated list of programs\n//           fetchPrograms();\n//           onClose();\n//         } else {\n//           alert('Failed to edit program: ' + data.data);\n//         }\n//       } catch (error) {\n//         console.error('Error editing program:', error);\n//         alert('Error editing program');\n//       }\n//     } else {\n//       alert('Please enter both title and description');\n//     }\n//   };\n\n//   return (\n//     <div className=\"edit-program-overlay\">\n//       <div className=\"edit-program\">\n//         <div className=\"edit-program-header\">\n//           <div>Edit Product</div>\n//           <button className=\"edit-program-close\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <form className='edit-program-form'>\n//           <div className=\"edit-program-form-row\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 value={title}\n//                 onChange={(e) => setTitle(e.target.value)}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Product Title*</label>\n//             </div>\n//           </div>\n//           <div className=\"edit-program-form-row\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 value={description}\n//                 onChange={(e) => setDescription(e.target.value)}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Description*</label>\n//             </div>\n//           </div>\n//           <div className=\"select-container\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"rules\"\n//               options={rules}\n//               value={selectedRules}\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Select Rules\"\n//               required\n//             />\n//             <label>Select Rules*</label>\n//           </div>\n//         </form>\n//         <div className=\"edit-program-footer\">\n//           <button className=\"edit-program-save\" onClick={handleEdit}>Save</button>\n//           <button className=\"edit-program-cancel\" onClick={onClose}>Cancel</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default EditProgram;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport './EditProgram.css';\n\nfunction EditProgram({ onClose, program, onEditProgram, fetchPrograms }) {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [selectedRules, setSelectedRules] = useState([]);\n  const [rules, setRules] = useState([]);\n\n  useEffect(() => {\n    if (program) {\n      setTitle(program.programName);\n      setDescription(program.description);\n      fetchMappedRules(program.programID); // Assuming program[2] is the program ID\n    }\n  }, [program]);\n\n  useEffect(() => {\n    fetchRules();\n  }, []);\n\n  const fetchRules = async () => {\n    try {\n      const response = await fetch(`/list_rules`);\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        console.log(\"Rule in Edit COMP: \", data.data);\n        setRules(data.data.map(rule => ({ value: rule.rulename, label: rule.rulename })));\n      } else {\n        console.error('Failed to fetch rules:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching rules:', error);\n    }\n  };\n\n  const fetchMappedRules = async (programId) => {\n    try {\n      const response = await fetch(`/get_mapped_rules`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ program_id: programId })\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        setSelectedRules(data.data.map(rule => ({ value: rule.rulename, label: rule.rulename })));\n      } else {\n        console.error('Failed to fetch mapped rules:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching mapped rules:', error);\n    }\n  };\n\n  const handleRuleChange = (selectedOptions) => {\n    setSelectedRules(selectedOptions);\n  };\n\n  const handleEdit = async () => {\n    if (title && description && description) {\n      try {\n        const response = await fetch(`/edit_program`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            program_id: program.programID,\n            name: title,\n            description,\n            rules: selectedRules.map(rule => rule.value)\n          })\n        });\n        const data = await response.json();\n        if (data.status === 'SUCCESS') {\n          alert('Program edited successfully!');\n          onEditProgram([title, description, program[2]]);\n          fetchPrograms(); // Fetch the updated list of programs\n          onClose();\n        } else {\n          alert('Failed to edit program: ' + data.data);\n        }\n      } catch (error) {\n        console.error('Error editing program:', error);\n        alert('Error editing program');\n      }\n    } else {\n      alert('Please enter both title and description');\n    }\n  };\n\n  return (\n    <div className=\"edit-program-overlay\">\n      <div className=\"edit-program\">\n        <div className=\"edit-program-header\">\n          <div>Edit Product</div>\n          <button className=\"edit-program-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <form className='edit-program-form'>\n          <div className=\"edit-program-form-row\">\n            <div className=\"floating-label-input\">\n              <input\n                type=\"text\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                required\n                placeholder=\" \"\n              />\n              <label>Product Title*</label>\n            </div>\n          </div>\n          <div className=\"edit-program-form-row\">\n            <div className=\"floating-label-input\">\n              <input\n                type=\"text\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                required\n                placeholder=\" \"\n              />\n              <label>Description*</label>\n            </div>\n          </div>\n          <div className=\"select-container\">\n            <Select\n              isMulti\n              closeMenuOnSelect={false}\n              name=\"rules\"\n              options={rules}\n              value={selectedRules}\n              className=\"basic-multi-select\"\n              classNamePrefix=\"select\"\n              onChange={handleRuleChange}\n              placeholder=\"Select Rules\"\n              required\n            />\n            <label>Select Rules*</label>\n          </div>\n        </form>\n        <div className=\"edit-program-footer\">\n          <button className=\"edit-program-save\" onClick={handleEdit}>Save</button>\n          <button className=\"edit-program-cancel\" onClick={onClose}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EditProgram;\n","import React from 'react';\nimport './DeleteProgram.css';\n\nfunction DeleteProgram({ onClose, onDelete, program }) {\n  const handleDelete = async () => {\n    try {\n      const response = await fetch(`/delete_program`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ program_id: program.programID })\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Program deleted successfully!');\n        onDelete(program);\n        onClose();\n      } else {\n        alert('Failed to delete program: ' + data.data);\n      }\n    } catch (error) {\n      console.error('Error deleting program:', error);\n      alert('Error deleting program');\n    }\n  };\n\n  return (\n    <div className=\"delete-program-overlay\">\n      <div className=\"delete-program\">\n        <div className=\"delete-program-header\">\n          <div>Delete Product</div>\n          <button className=\"delete-program-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <div className=\"delete-program-body\">\n          Are you sure you want to delete product '<strong>{program.programName}</strong>'?\n        </div>\n        <div className=\"delete-program-footer\">\n          <button className=\"delete-program-confirm\" onClick={handleDelete}>Yes, Delete</button>\n          <button className=\"delete-program-cancel\" onClick={onClose}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DeleteProgram;\n\n","\n// import React, { useState, useEffect } from 'react';\n// import './ProgramTypes.css';\n// import { FaEdit, FaTrash, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n// import AddNewProgram from './AddNewProgram';\n// import EditProgram from './EditProgram';\n// import DeleteProgram from './DeleteProgram';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPERADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function ProgramTypes() {\n//   const [programs, setPrograms] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n//   const [showEditProgram, setShowEditProgram] = useState(false);\n//   const [showDeleteProgram, setShowDeleteProgram] = useState(false);\n//   const [currentProgram, setCurrentProgram] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     // Assume user data is stored in localStorage\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     console.log(\"User Data in Program: \", userData);\n//     console.log(\"User Role in Program: \", userData[6]);\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchMappedRules = async (programId) => {\n//     try {\n//       const response = await fetch(`/get_mapped_rules`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ program_id: programId })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         console.log(\"Fetched Rules for Program ID:\", programId, data.data); // Debugging line\n//         return data.data.map(rule => ({\n//           value: rule[1],\n//           label: rule[1],\n//           mediaType: rule[2],\n//           disclaimer: rule[3]\n//         }));\n//       } else {\n//         console.error('Failed to fetch mapped rules:', data.data);\n//         return [];\n//       }\n//     } catch (error) {\n//       console.error('Error fetching mapped rules:', error);\n//       return [];\n//     }\n//   };\n\n//   const handleEditProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowEditProgram(true);\n//   };\n\n//   const handleDeleteProgram = (program) => {\n//     setCurrentProgram(program);\n//     setShowDeleteProgram(true);\n//   };\n\n//   const handleAddProgram = (newProgram) => {\n//     setPrograms([...programs, newProgram]);\n//   };\n\n//   const handleUpdateProgram = (updatedProgram) => {\n//     setPrograms(programs.map((program) =>\n//       program[2] === updatedProgram[2] ? updatedProgram : program\n//     ));\n//   };\n\n//   const handleConfirmDelete = (deletedProgram) => {\n//     setPrograms(programs.filter(program => program[2] !== deletedProgram[2]));\n//   };\n\n//   const handleRowClick = async (program) => {\n//     const programId = program[2];\n//     if (expandedRow === programId) {\n//       setExpandedRow(null);\n//     } else {\n//       const rules = await fetchMappedRules(programId);\n//       console.log(\"Rules to be set for Program ID:\", programId, rules); // Debugging line\n//       const updatedPrograms = programs.map(p => {\n//         if (p[2] === programId) {\n//           return { ...p, rules }; // Ensure rules are placed in a separate key\n//         }\n//         return p;\n//       });\n//       console.log(\"Updated Programs State:\", updatedPrograms); // Debugging line\n//       setPrograms(updatedPrograms);\n//       setExpandedRow(programId);\n//     }\n//   };\n\n//   return (\n//     <div className=\"program-types\">\n//       <div className=\"program-types-heading\">\n//         <div className='program-type-page-header'>Product Types</div>\n//         {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//           <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n//         )}\n//       </div>\n//       <table className=\"program-types__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Type of Product</th>\n//             <th>Description</th>\n//             <th>Created by</th>\n//             <th>Created DateTime</th>\n//             {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && <th>Action</th>}\n//             <th></th>\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {programs.length > 0 ? (\n//               programs.map((program, index) => (\n//                 <React.Fragment key={index}>\n//                   <tr\n//                     onClick={() => handleRowClick(program)}\n//                     className=\"program-types__program-row\"\n//                   >\n//                     <td>{program[0]}</td>\n//                     <td>{program[1]}</td>\n//                     <td>{program[3]}</td>\n//                     <td>{program[4]}</td>\n//                     {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                       <td>\n//                         {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                           <button className=\"program-types__edit-button\" onClick={(e) => { e.stopPropagation(); handleEditProgram(program); }}><FaEdit /> Edit</button>\n//                         )}\n//                         {(userRole === roles.SUPERADMIN) && (\n//                           <button className=\"program-types__delete-button\" onClick={(e) => { e.stopPropagation(); handleDeleteProgram(program); }}><FaTrash /> Delete</button>\n//                         )}\n//                       </td>\n//                     )}\n//                     <td>\n//                       {expandedRow === program[2] ? (\n//                         <FaChevronUp className=\"expand-icon\" />\n//                       ) : (\n//                         <FaChevronDown className=\"expand-icon\" />\n//                       )}\n//                     </td>\n//                   </tr>\n//                   {expandedRow === program[2] && (\n//                     <tr className=\"program-types__rules-row\">\n//                       <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE || userRole === roles.READ ? 6 : 5}>\n//                         <table className='program-types_associated_rules'>\n//                           <thead>\n//                             <tr>\n//                               <th>Rule Name</th>\n//                               <th>Media Type</th>\n//                               <th>Rule Definition</th>\n//                             </tr>\n//                           </thead>\n//                           <tbody>\n//                             {Array.isArray(program.rules) && program.rules.length > 0 ? (\n//                               program.rules.map((rule, ruleIndex) => (\n//                                 <tr key={ruleIndex}>\n//                                   <td>{rule.label}</td>\n//                                   <td>{rule.mediaType}</td>\n//                                   <td>{rule.disclaimer}</td>\n//                                 </tr>\n//                               ))\n//                             ) : (\n//                               <tr>\n//                                 <td colSpan=\"3\">No rules found</td>\n//                               </tr>\n//                             )}\n//                           </tbody>\n//                         </table>\n//                       </td>\n//                     </tr>\n//                   )}\n//                 </React.Fragment>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE ? 6 : 5}>No programs found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewProgram && (\n//         <AddNewProgram\n//           onClose={() => setShowAddNewProgram(false)}\n//           onAddProgram={handleAddProgram}\n//           onFetching={fetchPrograms}\n//         />\n//       )}\n//       {showEditProgram && (\n//         <EditProgram\n//           onClose={() => setShowEditProgram(false)}\n//           program={currentProgram}\n//           onEditProgram={handleUpdateProgram}\n//           fetchPrograms={fetchPrograms} // Pass the fetchPrograms function as a prop\n//         />\n//       )}\n//       {showDeleteProgram && (\n//         <DeleteProgram\n//           onClose={() => setShowDeleteProgram(false)}\n//           program={currentProgram}\n//           onDelete={handleConfirmDelete}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProgramTypes;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//KKKKKKKKKKKKKKKKKKKEEEEEEEEEYYYYYYYYYYYYYYYYYYYYVVVVVVVVVAAAAAAAAAAALLLLLLLLLUUUUUUUUUUEEEEEEEEEE\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport './ProgramTypes.css';\nimport { FaEdit, FaTrash, FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport AddNewProgram from './AddNewProgram';\nimport EditProgram from './EditProgram';\nimport DeleteProgram from './DeleteProgram';\nimport Spinner from './Spinner'; // Import Spinner\n\nconst roles = {\n  SUPERADMIN: 'SuperAdmin',\n  ADMIN: 'Admin',\n  WRITE: 'Write',\n  READ: 'Read',\n};\n\nfunction ProgramTypes() {\n  const [programs, setPrograms] = useState([]);\n  const [expandedRow, setExpandedRow] = useState(null);\n  const [showAddNewProgram, setShowAddNewProgram] = useState(false);\n  const [showEditProgram, setShowEditProgram] = useState(false);\n  const [showDeleteProgram, setShowDeleteProgram] = useState(false);\n  const [currentProgram, setCurrentProgram] = useState(null);\n  const [loading, setLoading] = useState(false); // State for loading\n  const [userRole, setUserRole] = useState(null);\n\n  useEffect(() => {\n    fetchPrograms();\n    // Assume user data is stored in localStorage\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    // console.log(\"User Data in Program: \", userData);\n    // console.log(\"User Role in Program: \", userData[6]);\n    if (userData) {\n      setUserRole(userData[6]);\n    }\n  }, []);\n\n  const fetchPrograms = async () => {\n    setLoading(true); // Start loading\n    try {\n      const response = await fetch(`/list_programs`);\n      const data = await response.json();\n      if (data.body.status === 'success') {\n        setPrograms(data.body.data);\n      } else {\n        console.error('Failed to fetch programs:', data.body.data);\n      }\n    } catch (error) {\n      console.error('Error fetching programs:', error);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n  \n\n  const fetchMappedRules = async (programId) => {\n    try {\n      console.log(\"Program id for fetchMappedRules: \",programId)\n      const response = await fetch(`/get_mapped_rules`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ program_id: programId })\n      });\n      const data = await response.json();\n      console.log(\"DATAAAAAAAAAAAAAA: \",data)\n      if (data.status === 'SUCCESS') {\n        console.log(\"Fetched Rules for Program IDDDDDDDD:\", programId, data.data); // Debugging line\n        return data.data.map(rule => ({\n          value: rule.rulename,\n          label: rule.rulename,\n          mediaType: rule.media_type,\n          disclaimer: rule.disclaimer\n        }));\n      } else {\n        console.error('Failed to fetch mapped rules:', data.body.data);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching mapped rules:', error);\n      return [];\n    }\n  };\n\n  const handleEditProgram = (program) => {\n    setCurrentProgram(program);\n    setShowEditProgram(true);\n  };\n\n  const handleDeleteProgram = (program) => {\n    setCurrentProgram(program);\n    setShowDeleteProgram(true);\n  };\n\n  const handleAddProgram = (newProgram) => {\n    setPrograms([...programs, newProgram]);\n  };\n\n  const handleUpdateProgram = (updatedProgram) => {\n    setPrograms(programs.map((program) =>\n      program.programID === updatedProgram.programID ? updatedProgram : program\n    ));\n  };\n\n  const handleConfirmDelete = (deletedProgram) => {\n    setPrograms(programs.filter(program => program.programID !== deletedProgram.programID));\n  };\n\n  const handleRowClick = async (program) => {\n    const programId = program.programID;\n    // console.log(\"Program id in Handlee CLICK: \",programId)\n    if (expandedRow === programId) {\n      setExpandedRow(null);\n    } else {\n      const rules = await fetchMappedRules(programId);\n      console.log(\"Rules to be set for Program ID:\", programId, rules); // Debugging line\n      const updatedPrograms = programs.map(p => {\n        if (p.programID === programId) {\n          return { ...p, rules }; // Ensure rules are placed in a separate key\n        }\n        return p;\n      });\n      console.log(\"Updated Programs State:\", updatedPrograms); // Debugging line\n      setPrograms(updatedPrograms);\n      setExpandedRow(programId);\n    }\n  };\n\n  return (\n    <div className=\"program-types\">\n      <div className=\"program-types-heading\">\n        <div className='program-type-page-header'>Product Types</div>\n        {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n          <div><button className=\"program-types__add-new-button\" onClick={() => setShowAddNewProgram(true)}>+ Add New</button></div>\n        )}\n      </div>\n      <table className=\"program-types__content-table\">\n        <thead>\n          <tr>\n            <th>Type of Product</th>\n            <th>Description</th>\n            <th>Created by</th>\n            <th>Created DateTime</th>\n            {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && <th>Action</th>}\n            <th></th>\n          </tr>\n        </thead>\n        {loading ? (\n          <div className=\"loader\">\n            <Spinner />\n          </div>\n        ) : (\n          <tbody>\n            {programs.length > 0 ? (\n              programs.map((program) => (\n                <React.Fragment key={program.programID}>\n                  <tr\n                    onClick={() => handleRowClick(program)}\n                    className=\"program-types__program-row\"\n                  >\n                    <td>{program.programName}</td>\n                    <td>{program.description}</td>\n                    <td>{program.created_by}</td>\n                    <td>{program.created_at}</td>\n                    {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n                      <td>\n                        {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n                          <button className=\"program-types__edit-button\" onClick={(e) => { e.stopPropagation(); handleEditProgram(program); }}><FaEdit /> Edit</button>\n                        )}\n                        {(userRole === roles.SUPERADMIN) && (\n                          <button className=\"program-types__delete-button\" onClick={(e) => { e.stopPropagation(); handleDeleteProgram(program); }}><FaTrash /> Delete</button>\n                        )}\n                      </td>\n                    )}\n                    <td>\n                      {expandedRow === program.programID ? (\n                        <FaChevronUp className=\"expand-icon\" />\n                      ) : (\n                        <FaChevronDown className=\"expand-icon\" />\n                      )}\n                    </td>\n                  </tr>\n                  {expandedRow === program.programID && (\n                    <tr className=\"program-types__rules-row\">\n                      <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE || userRole === roles.READ ? 6 : 5}>\n                        <table className='program-types_associated_rules'>\n                          <thead>\n                            <tr>\n                              <th>Rule Name</th>\n                              <th>Media Type</th>\n                              <th>Rule Definition</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {Array.isArray(program.rules) && program.rules.length > 0 ? (\n                              program.rules.map((rule, ruleIndex) => (\n                                <tr key={ruleIndex}>\n                                  <td>{rule.label}</td>\n                                  <td>{rule.mediaType}</td>\n                                  <td>{rule.disclaimer}</td>\n                                </tr>\n                              ))\n                            ) : (\n                              <tr>\n                                <td colSpan=\"3\">No rules found</td>\n                              </tr>\n                            )}\n                          </tbody>\n                        </table>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))\n            ) : (\n              <tr>\n                <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE ? 6 : 5}>No programs found</td>\n              </tr>\n            )}\n          </tbody>\n        )}\n      </table>\n      {showAddNewProgram && (\n        <AddNewProgram\n          onClose={() => setShowAddNewProgram(false)}\n          onAddProgram={handleAddProgram}\n          onFetching={fetchPrograms}\n        />\n      )}\n      {showEditProgram && (\n        <EditProgram\n          onClose={() => setShowEditProgram(false)}\n          program={currentProgram}\n          onEditProgram={handleUpdateProgram}\n          fetchPrograms={fetchPrograms} // Pass the fetchPrograms function as a prop\n        />\n      )}\n      {showDeleteProgram && (\n        <DeleteProgram\n          onClose={() => setShowDeleteProgram(false)}\n          program={currentProgram}\n          onDelete={handleConfirmDelete}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default ProgramTypes;\n","import React from 'react';\nimport './Spinner.css';  // Import the CSS for the spinner\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\"></div>\n  );\n}\n\nexport default Spinner;\n"],"names":["_ref","onClose","onAddProgram","onFetching","userLocalData","JSON","parse","localStorage","getItem","formData","setFormData","useState","title","description","selectedRules","created_by","concat","handleChange","e","name","value","target","rules","setRules","useEffect","fetchRules","async","response","fetch","data","json","status","console","log","map","rule","rulename","label","error","_jsx","className","children","_jsxs","onClick","type","onChange","required","placeholder","Select","isMulti","closeMenuOnSelect","options","classNamePrefix","selectedOptions","option","length","method","headers","body","stringify","alert","program","onEditProgram","fetchPrograms","setTitle","setDescription","setSelectedRules","programName","fetchMappedRules","programID","program_id","programId","onDelete","roles","programs","setPrograms","expandedRow","setExpandedRow","showAddNewProgram","setShowAddNewProgram","showEditProgram","setShowEditProgram","showDeleteProgram","setShowDeleteProgram","currentProgram","setCurrentProgram","loading","setLoading","userRole","setUserRole","userData","handleRowClick","mediaType","media_type","disclaimer","updatedPrograms","p","Spinner","React","created_at","stopPropagation","handleEditProgram","FaEdit","handleDeleteProgram","FaTrash","FaChevronUp","FaChevronDown","colSpan","Array","isArray","ruleIndex","AddNewProgram","newProgram","EditProgram","updatedProgram","DeleteProgram","deletedProgram","filter"],"sourceRoot":""}