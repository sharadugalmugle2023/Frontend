{"version":3,"file":"static/js/1.a7e44c7f.chunk.js","mappings":"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","sources":["components/AddNewRule.js","components/EditRule.js","components/DeleteRule.js","components/ApproveDeclineStatus.js","components/Rules.js","components/Spinner.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './AddNewRule.css';\n\n// function AddNewRule({ onClose, onAddRule }) {\n//   const [formData, setFormData] = useState({\n//     title: '',\n//     description: '',\n//     mediaType: '',\n//     disclaimer: '',\n//   });\n\n//   const [programs, setPrograms] = useState([]);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleAdd = () => {\n//     const { title, description, mediaType, disclaimer } = formData;\n//     if (title && description && mediaType && disclaimer) {\n//       const newRule = { rulename: title, media_type: mediaType, description, disclaimer, 'ruleStatus':'pending' };\n//       onAddRule(newRule);\n//       onClose();\n//     } else {\n//       alert('Please enter all fields');\n//     }\n//   };\n\n//   return (\n//     <div className=\"add-new-rule-overlay\">\n//       <div className=\"add-new-rule\">\n//         <div className=\"add-new-rule-header\">\n//           <div>Add New Rule</div>\n//           <button className=\"add-new-rule-close\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <div className=\"add-new-rule-body\">\n//           <div className=\"floating-label-input\">\n//             <input\n//               type=\"text\"\n//               name=\"title\"\n//               value={formData.title}\n//               onChange={handleChange}\n//               required\n//               placeholder=\" \"\n//             />\n//             <label>Rule Title*</label>\n//           </div>\n\n//           <div className=\"floating-label-input\">\n//             <input\n//               type=\"text\"\n//               name=\"description\"\n//               value={formData.description}\n//               onChange={handleChange}\n//               required\n//               placeholder=\" \"\n//             />\n//             <label>Description*</label>\n//           </div>\n\n//           <div className=\"floating-label-input\">\n//             <input\n//               type=\"text\"\n//               name=\"disclaimer\"\n//               value={formData.disclaimer}\n//               onChange={handleChange}\n//               required\n//               placeholder=\" \"\n//             />\n//             <label>Rule Defination*</label>\n//           </div>\n\n//           <div className=\"add-new-rule-field-row\">\n//           <div className=\"floating-label-input\">\n//               <select\n//                 name=\"mediaType\"\n//                 value={formData.mediaType}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select User</option>\n//                 <option value=\"Sharad\">sharad</option>\n//                 <option value=\"Om\">Om</option>\n//                 <option value=\"Ram\">Ram</option>\n//               </select>\n//               <label>List Users*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <select\n//                 name=\"mediaType\"\n//                 value={formData.mediaType}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Media Type</option>\n//                 <option value=\"PDF/Image\">PDF/Image</option>\n//                 <option value=\"Video\">Video</option>\n//                 <option value=\"GIF\">GIF</option>\n//               </select>\n//               <label>Media Type*</label>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"add-new-rule-footer\">\n//           <button className=\"add-new-rule-add\" onClick={handleAdd}>Add</button>\n//           <button className=\"add-new-rule-cancel\" onClick={onClose}>Cancel</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AddNewRule;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport './AddNewRule.css';\n\nfunction AddNewRule({ onClose, onAddRule }) {\n  const userLocalData = JSON.parse(localStorage.getItem('userData'));\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    mediaType: '',\n    disclaimer: '',\n    assigned_to: '',\n    created_by: `${userLocalData[1]} ${userLocalData[2]}`,\n  });\n\n  const [users, setUsers] = useState([]); // Added users state\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch(`/list_users`);\n      const data = await response.json();\n      if (data.body.status === 'SUCCESS') {\n        setUsers(data.body.data);\n      } else {\n        console.error('Failed to fetch users:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  console.log(\"USER in add rule: \",users)\n\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleAdd = () => {\n    const { title, description, mediaType, disclaimer, assigned_to, created_by } = formData;\n    console.log(\"title is:\",title);\n    console.log(\"description is:\",description);\n    console.log(\"mediaType is:\",mediaType);\n    console.log(\"disclaimer is:\",disclaimer);\n    console.log(\"assigned_to is:\",assigned_to);\n    console.log(\"created_by is:\",created_by);\n    if (title && description && mediaType && disclaimer && assigned_to && created_by) {\n      const newRule = { rulename: title, media_type: mediaType, description, disclaimer, 'ruleStatus': 'pending', assigned_to, created_by };\n      onAddRule(newRule);\n      onClose();\n    } else {\n      alert('Please enter all fields');\n    }\n  };\n\n  return (\n    <div className=\"add-new-rule-overlay\">\n      <div className=\"add-new-rule\">\n        <div className=\"add-new-rule-header\">\n          <div>Add New Rule</div>\n          <button className=\"add-new-rule-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <div className=\"add-new-rule-body\">\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleChange}\n              required\n              placeholder=\" \"\n            />\n            <label>Rule Title*</label>\n          </div>\n\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              required\n              placeholder=\" \"\n            />\n            <label>Description*</label>\n          </div>\n\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              name=\"disclaimer\"\n              value={formData.disclaimer}\n              onChange={handleChange}\n              required\n              placeholder=\" \"\n            />\n            <label>Rule Definition*</label>\n          </div>\n\n          <div className=\"add-new-rule-field-row\">\n            <div className=\"floating-label-input\">\n              <select\n                name=\"assigned_to\"\n                value={formData.assigned_to}\n                onChange={handleChange}\n                required\n              >\n                <option value=\"\" disabled>Select Assignee</option>\n                {users.map((user) => (\n                  (user.role === \"SuperAdmin\") && (\n                    <option key={user.userID} value={user.email}>{user.email}</option>\n                  )\n                ))}\n              </select>\n              <label>Assigned To*</label>\n            </div>\n            <div className=\"floating-label-input\">\n              <select\n                name=\"mediaType\"\n                value={formData.mediaType}\n                onChange={handleChange}\n                required\n              >\n                <option value=\"\" disabled>Select Media Type</option>\n                <option value=\"PDF/Image\">PDF/Image</option>\n                <option value=\"Video\">Video</option>\n                <option value=\"GIF\">GIF</option>\n              </select>\n              <label>Media Type*</label>\n            </div>\n          </div>\n        </div>\n        <div className=\"add-new-rule-footer\">\n          <button className=\"add-new-rule-add\" onClick={handleAdd}>Add</button>\n          <button className=\"add-new-rule-cancel\" onClick={onClose}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddNewRule;\n\n\n\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport './EditRule.css';\n\nfunction EditRule({ onClose, rule }) {\n  const [title, setTitle] = useState('');\n  const [mediaType, setMediaType] = useState('');\n  const [description, setDescription] = useState('');\n  const [disclaimer, setDisclaimer] = useState('');\n\n  console.log(\"RULE in edit: \",rule)\n\n  useEffect(() => {\n    if (rule) {\n      setTitle(rule.rulename);\n      setMediaType(rule.media_type);\n      setDescription(rule.description);\n      setDisclaimer(rule.disclaimer);\n    }\n  }, [rule]);\n\n  const handleEdit = async () => {\n    if (title && description && mediaType) {\n      try {\n        const response = await fetch(`/edit_rule`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ rule_id: rule.rule_id, rulename: title, description, disclaimer })\n        });\n        const data = await response.json();\n        if (data.status === 'SUCCESS') {\n          alert('Rule updated successfully!');\n          onClose();\n        } else {\n          alert('Failed to update rule: ' + data.data);\n        }\n      } catch (error) {\n        console.error('Error updating rule:', error);\n        alert('Error updating rule');\n      }\n    } else {\n      alert('Please enter all fields');\n    }\n  };\n\n  return (\n    <div className=\"edit-rule-overlay\">\n      <div className=\"edit-rule\">\n        <div className=\"edit-rule-header\">\n          <div>Edit Rule</div>\n          <button className=\"edit-rule-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <div className=\"edit-rule-body\">\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n              placeholder=\" \"\n            />\n            <label>Rule Name</label>\n          </div>\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              required\n              placeholder=\" \"\n            />\n            <label>Description</label>\n          </div>\n          <div className=\"floating-label-input\">\n            <input\n              type=\"text\"\n              value={disclaimer}\n              onChange={(e) => setDisclaimer(e.target.value)}\n              placeholder=\" \"\n            />\n            <label>Rule Defination</label>\n          </div>\n          <div className=\"edit-rule-field-row\">\n            <div className=\"select-container floating-label-input\">\n              <select\n                value={mediaType}\n                onChange={(e) => setMediaType(e.target.value)}\n                disabled\n              >\n                <option value=\"PDF/Image\">PDF/Image</option>\n                <option value=\"Video\">Video</option>\n                <option value=\"GIF\">GIF</option>\n              </select>\n              <label>Media Type</label>\n            </div>\n          </div>\n        </div>\n        <div className=\"edit-rule-footer\">\n          <button className=\"edit-rule-save\" onClick={handleEdit}>Save</button>\n          <button className=\"edit-rule-cancel\" onClick={onClose}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EditRule;\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport './DeleteRule.css';\n\nfunction DeleteRule({ onClose, onDelete, rule }) {\n\n  const handleDelete = () => {\n    onDelete(rule.rule_id);\n    onClose();\n  };\n\n  return (\n    <div className=\"delete-rule-overlay\">\n      <div className=\"delete-rule\">\n        <div className=\"delete-rule-header\">\n          <div>Delete Rule</div>\n          <button className=\"delete-rule-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <div className=\"delete-rule-body\">\n          Are you sure you want to delete rule '<strong>{rule.rulename}</strong>'?\n        </div>\n        <div className=\"delete-rule-footer\">\n          <button className=\"delete-rule-confirm\" onClick={handleDelete}>Yes, Delete</button>\n          <button className=\"delete-rule-cancel\" onClick={onClose}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DeleteRule;\n","// import React from 'react';\n// import './ApproveDeclineStatus.css';\n\n// function ApproveDeclineStatus({ onClose, rule, fetchRules }) {\n//   const handleApprove = async () => {\n//     await changeRuleStatus('approved');\n//   };\n\n//   const handleDecline = async () => {\n//     await changeRuleStatus('declined');\n//   };\n\n//   const changeRuleStatus = async (newStatus) => {\n//     try {\n//       const response = await fetch('/change_rule_status', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ rule_id: rule.rule_id, status: newStatus })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule status updated successfully!');\n//         fetchRules(); // Refresh the rules list\n//         onClose();\n//       } else {\n//         alert('Failed to update rule status: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error updating rule status:', error);\n//       alert('Error updating rule status');\n//     }\n//   };\n\n//   return (\n//     <div className=\"approve-decline-overlay\">\n//       <div className=\"approve-decline\">\n//         <div className=\"approve-decline-header\">\n//           <h3>Change Rule Status</h3>\n//           <button className=\"approve-decline-close\" onClick={onClose}>×</button>\n//         </div>\n//         <div className=\"approve-decline-body\">\n//           <p>Are you sure you want to change the status of the rule <strong>{rule.rulename}</strong>?</p>\n//         </div>\n//         <div className=\"approve-decline-footer\">\n//           <button className=\"approve-button\" onClick={handleApprove}>Approve</button>\n//           <button className=\"decline-button\" onClick={handleDecline}>Decline</button>\n//           <button className=\"cancel-button\" onClick={onClose}>Cancel</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ApproveDeclineStatus;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React from 'react';\nimport './ApproveDeclineStatus.css';\n\nfunction ApproveDeclineStatus({ onClose, rule, fetchRules }) {\n  console.log(\"Rule in ApproveDeclineStatus comp:  \", rule)\n  const handleApprove = async () => {\n    await changeRuleStatus('approved');\n  };\n\n  const handleDecline = async () => {\n    await changeRuleStatus('declined');\n  };\n\n  const changeRuleStatus = async (newStatus) => {\n    try {\n      const response = await fetch('/change_rule_status', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ rule_id: rule.rule_id, status: newStatus })\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Rule status updated successfully!');\n        fetchRules(); // Refresh the rules list\n        onClose();\n      } else {\n        alert('Failed to update rule status: ' + data.data);\n      }\n    } catch (error) {\n      console.error('Error updating rule status:', error);\n      alert('Error updating rule status');\n    }\n  };\n\n  return (\n    <div className=\"approve-decline-overlay\">\n      <div className=\"approve-decline\">\n        <div className=\"approve-decline-header\">\n          <div>Change Rule Status</div>\n          <button className=\"approve-decline-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <div className=\"approve-decline-body\">\n          <p>Are you sure you want to change the status of the rule <strong>{rule.rulename}</strong>?</p>\n        </div>\n        <div className=\"approve-decline-footer\">\n          <button className=\"approve-button\" onClick={handleApprove}>Approve</button>\n          <button className=\"decline-button\" onClick={handleDecline}>Decline</button>\n          {/* <button className=\"cancel-button\" onClick={onClose}>Cancel</button> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ApproveDeclineStatus;\n","\n\n\n// //FFFFFFFFFFFFFFFFFFFFFFIIIIIIIIIIIIIIIIIIIIIIIINNNNNNNNNNNNNNNNNNNNNEEEEEEEEEEEEE\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Rules.css';\n// import { FaEdit, FaTrash, FaSearch, FaTimesCircle } from 'react-icons/fa';\n// import { IoMdCheckmarkCircleOutline, IoIosHourglass } from 'react-icons/io';\n// import AddNewRule from './AddNewRule';\n// import EditRule from './EditRule';\n// import DeleteRule from './DeleteRule';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPERADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Rules() {\n//   const [rules, setRules] = useState([]);\n//   const [allRules, setAllRules] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewRule, setShowAddNewRule] = useState(false);\n//   const [showEditRule, setShowEditRule] = useState(false);\n//   const [showDeleteRule, setShowDeleteRule] = useState(false);\n//   const [currentRule, setCurrentRule] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [expandedRow, setExpandedRow] = useState(null); // State for expanded row\n//   const [statusFilter, setStatusFilter] = useState(''); // State for dropdown\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchRules();\n//     // Assume user data is stored in localStorage\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchRules = async (status = '') => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_rules?status=${status}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setAllRules(data.data);\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredRules = async (term) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_rules?search=${term}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const debouncedFetchFilteredRules = useCallback(debounce(fetchFilteredRules, 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredRules(value);\n//   };\n\n//   const handleAddRule = async (newRule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/add_rule`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(newRule)\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule added successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to add rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error adding rule:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleEditRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowEditRule(true);\n//   };\n\n//   const handleDeleteRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowDeleteRule(true);\n//   };\n\n//   const confirmDeleteRule = async (rule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/delete_rule`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ rule_id: rule[0] })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule deleted successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to delete rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error deleting rule:', error);\n//       alert('Error deleting rule');\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleRowClick = (rule) => {\n//     if (expandedRow === rule[0]) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(rule[0]);\n//     }\n//   };\n\n//   const handleStatusFilterChange = (e) => {\n//     const { value } = e.target;\n//     setStatusFilter(value);\n//     fetchRules(value);\n//   };\n\n//   const renderStatusIcon = (status) => {\n//     switch (status) {\n//       case 'approved':\n//         return <IoMdCheckmarkCircleOutline className=\"status-icon approved\" />;\n//       case 'pending':\n//         return <IoIosHourglass className=\"status-icon pending\" />;\n//       case 'declined':\n//         return <FaTimesCircle className=\"status-icon declined\" />;\n//       default:\n//         return null;\n//     }\n//   };\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rules-heading\">\n//         <div className=\"rules-header\">\n//           <div className='rule-page-header'>Rules</div>\n//           <select\n//             className=\"rules-status-dropdown\"\n//             value={statusFilter}\n//             onChange={handleStatusFilterChange}\n//           >\n//             <option value=\"\">All Rules</option>\n//             <option value=\"approved\">Approved Rules</option>\n//             <option value=\"pending\">Pending Rules</option>\n//             <option value=\"declined\">Declined Rules</option>\n//           </select>\n//         </div>\n//         <div className=\"rules-search-add\">\n//           <div className=\"rules-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Rule Name / Media Type\"\n//               className=\"rules-search-input\"\n//             />\n//             <FaSearch className=\"rules-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//             <button className=\"rules__add-new-button\" onClick={() => setShowAddNewRule(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"rules__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Rule Name</th>\n//             <th>Media Type</th>\n//             <th>Description</th>\n//             <th>Created By</th>\n//             <th>Rule Status</th>\n//             {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {rules.length > 0 ? (\n//               rules.map((rule, index) => (\n//                 <React.Fragment key={index}>\n//                   <tr onClick={() => handleRowClick(rule)} className=\"rules__rule-row\">\n//                     <td>{rule[1]}</td>\n//                     <td>{rule[2]}</td>\n//                     <td>{rule[3]}</td>\n//                     <td>{rule[6]}</td>\n//                     <td>{renderStatusIcon(rule[7])} {rule[7]}</td>\n//                     {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                       <td className='edit-delete-status'>\n//                         {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                           <button className=\"rules__edit-button\" onClick={(e) => { e.stopPropagation(); handleEditRule(rule); }}><FaEdit /></button>\n//                         )}\n//                         {(userRole === roles.SUPERADMIN) && (\n//                           <button className=\"rules__delete-button\" onClick={(e) => { e.stopPropagation(); handleDeleteRule(rule); }}><FaTrash /></button>\n//                         )}\n//                           {/* <button classNam  e='rule-status-button'><IoMdCheckmarkCircleOutline className='vali'/></button> */}\n//                       </td>\n//                     )}\n//                   </tr>\n//                 </React.Fragment>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE ? 6 : 5}>No rules found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewRule && (\n//         <AddNewRule \n//           onClose={() => setShowAddNewRule(false)}\n//           onAddRule={handleAddRule} \n//         />\n//       )}\n//       {showEditRule && (\n//         <EditRule\n//           onClose={() => {\n//             setShowEditRule(false);\n//             fetchRules(); // Refresh the rules after edit\n//           }}\n//           rule={currentRule}\n//         />\n//       )}\n//       {showDeleteRule && (\n//         <DeleteRule\n//           onClose={() => setShowDeleteRule(false)}\n//           onDelete={() => confirmDeleteRule(currentRule)}\n//           rule={currentRule}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Rules;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Rules.css';\n// import { FaEdit, FaTrash, FaSearch, FaTimesCircle } from 'react-icons/fa';\n// import { IoMdCheckmarkCircleOutline, IoIosHourglass } from 'react-icons/io';\n// import AddNewRule from './AddNewRule';\n// import EditRule from './EditRule';\n// import DeleteRule from './DeleteRule';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPERADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Rules() {\n//   const [rules, setRules] = useState([]);\n//   const [allRules, setAllRules] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewRule, setShowAddNewRule] = useState(false);\n//   const [showEditRule, setShowEditRule] = useState(false);\n//   const [showDeleteRule, setShowDeleteRule] = useState(false);\n//   const [currentRule, setCurrentRule] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [expandedRow, setExpandedRow] = useState(null); // State for expanded row\n//   const [statusFilter, setStatusFilter] = useState(''); // State for dropdown\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchRules();\n//     // Assume user data is stored in localStorage\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchRules = async (status = '') => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_rules?status=${status}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setAllRules(data.data);\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredRules = async (term, status = '') => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_rules?search=${term}&status=${status}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const debouncedFetchFilteredRules = useCallback(debounce((term, status) => fetchFilteredRules(term, status), 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredRules(value, statusFilter);\n//   };\n\n//   const handleAddRule = async (newRule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/add_rule`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(newRule)\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule added successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to add rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error adding rule:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleEditRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowEditRule(true);\n//   };\n\n//   const handleDeleteRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowDeleteRule(true);\n//   };\n\n//   const confirmDeleteRule = async (rule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/delete_rule`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ rule_id: rule[0] })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule deleted successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to delete rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error deleting rule:', error);\n//       alert('Error deleting rule');\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleRowClick = (rule) => {\n//     if (expandedRow === rule[0]) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(rule[0]);\n//     }\n//   };\n\n//   const handleStatusFilterChange = (e) => {\n//     const { value } = e.target;\n//     setStatusFilter(value);\n//     fetchRules(value);\n//   };\n\n//   const renderStatusIcon = (status) => {\n//     switch (status) {\n//       case 'approved':\n//         return <IoMdCheckmarkCircleOutline className=\"status-icon approved\" />;\n//       case 'pending':\n//         return <IoIosHourglass className=\"status-icon pending\" />;\n//       case 'declined':\n//         return <FaTimesCircle className=\"status-icon declined\" />;\n//       default:\n//         return null;\n//     }\n//   };\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rules-heading\">\n//         <div className=\"rules-header\">\n//           <div className='rule-page-header'>Rules</div>\n//           <select\n//             className=\"rules-status-dropdown\"\n//             value={statusFilter}\n//             onChange={handleStatusFilterChange}\n//           >\n//             <option value=\"\">All Rules</option>\n//             <option value=\"approved\">Approved Rules</option>\n//             <option value=\"pending\">Pending Rules</option>\n//             <option value=\"declined\">Declined Rules</option>\n//           </select>\n//         </div>\n//         <div className=\"rules-search-add\">\n//           <div className=\"rules-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Rule Name / Media Type\"\n//               className=\"rules-search-input\"\n//             />\n//             <FaSearch className=\"rules-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//             <button className=\"rules__add-new-button\" onClick={() => setShowAddNewRule(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"rules__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Rule Name</th>\n//             <th>Media Type</th>\n//             <th>Description</th>\n//             <th>Created By</th>\n//             <th>Rule Status</th>\n//             {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {rules.length > 0 ? (\n//               rules.map((rule, index) => (\n//                 <React.Fragment key={index}>\n//                   <tr onClick={() => handleRowClick(rule)} className=\"rules__rule-row\">\n//                     <td>{rule[1]}</td>\n//                     <td>{rule[2]}</td>\n//                     <td>{rule[3]}</td>\n//                     <td>{rule[6]}</td>\n//                     <td>{renderStatusIcon(rule[7])} {rule[7]}</td>\n//                     {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                       <td className='edit-delete-status'>\n//                         {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                           <button className=\"rules__edit-button\" onClick={(e) => { e.stopPropagation(); handleEditRule(rule); }}><FaEdit /></button>\n//                         )}\n//                         {(userRole === roles.SUPERADMIN) && (\n//                           <button className=\"rules__delete-button\" onClick={(e) => { e.stopPropagation(); handleDeleteRule(rule); }}><FaTrash /></button>\n//                         )}\n//                       </td>\n//                     )}\n//                   </tr>\n//                 </React.Fragment>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE ? 6 : 5}>No rules found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewRule && (\n//         <AddNewRule \n//           onClose={() => setShowAddNewRule(false)}\n//           onAddRule={handleAddRule} \n//         />\n//       )}\n//       {showEditRule && (\n//         <EditRule\n//           onClose={() => {\n//             setShowEditRule(false);\n//             fetchRules(); // Refresh the rules after edit\n//           }}\n//           rule={currentRule}\n//         />\n//       )}\n//       {showDeleteRule && (\n//         <DeleteRule\n//           onClose={() => setShowDeleteRule(false)}\n//           onDelete={() => confirmDeleteRule(currentRule)}\n//           rule={currentRule}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Rules;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Rules.css';\n// import { FaEdit, FaTrash, FaSearch, FaTimesCircle } from 'react-icons/fa';\n// import { IoMdCheckmarkCircleOutline, IoIosHourglass } from 'react-icons/io';\n// import AddNewRule from './AddNewRule';\n// import EditRule from './EditRule';\n// import DeleteRule from './DeleteRule';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPERADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Rules() {\n//   const [rules, setRules] = useState([]);\n//   const [allRules, setAllRules] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewRule, setShowAddNewRule] = useState(false);\n//   const [showEditRule, setShowEditRule] = useState(false);\n//   const [showDeleteRule, setShowDeleteRule] = useState(false);\n//   const [currentRule, setCurrentRule] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [expandedRow, setExpandedRow] = useState(null); // State for expanded row\n//   const [statusFilter, setStatusFilter] = useState(''); // State for dropdown\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchRules();\n//     // Assume user data is stored in localStorage\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchRules = async (status = '') => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_rules?status=${status}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setAllRules(data.data);\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredRules = async (term, status = '') => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_rules?search=${term}&status=${status}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const debouncedFetchFilteredRules = useCallback(debounce((term, status) => fetchFilteredRules(term, status), 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredRules(value, statusFilter);\n//   };\n\n//   const handleAddRule = async (newRule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/add_rule`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(newRule)\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule added successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to add rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error adding rule:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleEditRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowEditRule(true);\n//   };\n\n//   const handleDeleteRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowDeleteRule(true);\n//   };\n\n//   const confirmDeleteRule = async (rule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/delete_rule`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ rule_id: rule[0] })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule deleted successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to delete rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error deleting rule:', error);\n//       alert('Error deleting rule');\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleRowClick = (rule) => {\n//     if (expandedRow === rule[0]) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(rule[0]);\n//     }\n//   };\n\n//   const handleStatusFilterChange = (e) => {\n//     const { value } = e.target;\n//     setStatusFilter(value);\n//     fetchRules(value);\n//   };\n\n//   const renderStatusIcon = (status) => {\n//     switch (status) {\n//       case 'approved':\n//         return <IoMdCheckmarkCircleOutline className=\"status-icon approved\" />;\n//       case 'pending':\n//         return <IoIosHourglass className=\"status-icon pending\" />;\n//       case 'declined':\n//         return <FaTimesCircle className=\"status-icon declined\" />;\n//       default:\n//         return null;\n//     }\n//   };\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rules-heading\">\n//         <div className=\"rules-header\">\n//           <div className='rule-page-header'>Rules</div>\n//           <select\n//             className=\"rules-status-dropdown\"\n//             value={statusFilter}\n//             onChange={handleStatusFilterChange}\n//           >\n//             <option value=\"\">All Rules</option>\n//             <option value=\"approved\">Approved Rules</option>\n//             <option value=\"pending\">Pending Rules</option>\n//             <option value=\"declined\">Declined Rules</option>\n//           </select>\n//         </div>\n//         <div className=\"rules-search-add\">\n//           <div className=\"rules-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Rule Name / Media Type\"\n//               className=\"rules-search-input\"\n//             />\n//             <FaSearch className=\"rules-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//             <button className=\"rules__add-new-button\" onClick={() => setShowAddNewRule(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"rules__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Rule Name</th>\n//             <th>Media Type</th>\n//             <th>Description</th>\n//             <th>Created By</th>\n//             <th>Rule Status</th>\n//             {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {rules.length > 0 ? (\n//               rules.map((rule, index) => (\n//                 <React.Fragment key={index}>\n//                   <tr onClick={() => handleRowClick(rule)} className=\"rules__rule-row\">\n//                     <td>{rule.rulename}</td>\n//                     <td>{rule.media_type}</td>\n//                     <td>{rule.description}</td>\n//                     <td>{rule.created_by}</td>\n//                     <td>{renderStatusIcon(rule.rule_status)} {rule.rule_status}</td>\n//                     {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                       <td className='edit-delete-status'>\n//                         {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                           <button className=\"rules__edit-button\" onClick={(e) => { e.stopPropagation(); handleEditRule(rule); }}><FaEdit /></button>\n//                         )}\n//                         {(userRole === roles.SUPERADMIN) && (\n//                           <button className=\"rules__delete-button\" onClick={(e) => { e.stopPropagation(); handleDeleteRule(rule); }}><FaTrash /></button>\n//                         )}\n//                       </td>\n//                     )}\n//                   </tr>\n//                 </React.Fragment>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE ? 6 : 5}>No rules found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewRule && (\n//         <AddNewRule \n//           onClose={() => setShowAddNewRule(false)}\n//           onAddRule={handleAddRule} \n//         />\n//       )}\n//       {showEditRule && (\n//         <EditRule\n//           onClose={() => {\n//             setShowEditRule(false);\n//             fetchRules(); // Refresh the rules after edit\n//           }}\n//           rule={currentRule}\n//         />\n//       )}\n//       {showDeleteRule && (\n//         <DeleteRule\n//           onClose={() => setShowDeleteRule(false)}\n//           onDelete={() => confirmDeleteRule(currentRule)}\n//           rule={currentRule}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Rules;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Rules.css';\n// import { FaEdit, FaTrash, FaSearch, FaTimesCircle } from 'react-icons/fa';\n// import { IoMdCheckmarkCircleOutline, IoIosHourglass } from 'react-icons/io';\n// import AddNewRule from './AddNewRule';\n// import EditRule from './EditRule';\n// import DeleteRule from './DeleteRule';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPERADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Rules() {\n//   const [rules, setRules] = useState([]);\n//   const [allRules, setAllRules] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewRule, setShowAddNewRule] = useState(false);\n//   const [showEditRule, setShowEditRule] = useState(false);\n//   const [showDeleteRule, setShowDeleteRule] = useState(false);\n//   const [currentRule, setCurrentRule] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [expandedRow, setExpandedRow] = useState(null); // State for expanded row\n//   const [statusFilter, setStatusFilter] = useState(''); // State for dropdown\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchRules();\n//     // Assume user data is stored in localStorage\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchRules = async (status = '') => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_rules?status=${status}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setAllRules(data.data);\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredRules = async (term, status = '') => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_rules?search=${term}&status=${status}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data);\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const debouncedFetchFilteredRules = useCallback(debounce((term, status) => fetchFilteredRules(term, status), 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredRules(value, statusFilter);\n//   };\n\n//   const handleAddRule = async (newRule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/add_rule`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(newRule)\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule added successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to add rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error adding rule:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleEditRule = (rule) => {\n//     console.log(\"Checking Wrong placing: \", rule)\n//     setCurrentRule(rule);\n//     setShowEditRule(true);\n//   };\n\n//   const handleDeleteRule = (rule) => {\n//     setCurrentRule(rule);\n//     setShowDeleteRule(true);\n//   };\n\n//   const confirmDeleteRule = async (rule) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/delete_rule`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ rule_id: rule.rule_id })\n//       });\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         alert('Rule deleted successfully!');\n//         fetchRules(); // Refresh rules list\n//       } else {\n//         alert('Failed to delete rule: ' + data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error deleting rule:', error);\n//       alert('Error deleting rule');\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const handleRowClick = (rule) => {\n//     if (expandedRow === rule.id) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(rule.id);\n//     }\n//   };\n\n//   const handleStatusFilterChange = (e) => {\n//     const { value } = e.target;\n//     setStatusFilter(value);\n//     fetchRules(value);\n//   };\n\n//   const renderStatusIcon = (status) => {\n//     switch (status) {\n//       case 'approved':\n//         return <IoMdCheckmarkCircleOutline className=\"status-icon approved\" />;\n//       case 'pending':\n//         return <IoIosHourglass className=\"status-icon pending\" />;\n//       case 'declined':\n//         return <FaTimesCircle className=\"status-icon declined\" />;\n//       default:\n//         return null;\n//     }\n//   };\n\n//   return (\n//     <div className=\"rules\">\n//       <div className=\"rules-heading\">\n//         <div className=\"rules-header\">\n//           <div className='rule-page-header'>Rules</div>\n//           <select\n//             className=\"rules-status-dropdown\"\n//             value={statusFilter}\n//             onChange={handleStatusFilterChange}\n//           >\n//             <option value=\"\">All Rules</option>\n//             <option value=\"approved\">Approved Rules</option>\n//             <option value=\"pending\">Pending Rules</option>\n//             <option value=\"declined\">Declined Rules</option>\n//           </select>\n//         </div>\n//         <div className=\"rules-search-add\">\n//           <div className=\"rules-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Rule Name / Media Type\"\n//               className=\"rules-search-input\"\n//             />\n//             <FaSearch className=\"rules-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//             <button className=\"rules__add-new-button\" onClick={() => setShowAddNewRule(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"rules__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Rule Name</th>\n//             <th>Media Type</th>\n//             <th>Description</th>\n//             <th>Created By</th>\n//             <th>Rule Status</th>\n//             {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {rules.length > 0 ? (\n//               rules.map((rule, index) => (\n//                 <React.Fragment key={index}>\n//                   <tr onClick={() => handleRowClick(rule)} className=\"rules__rule-row\">\n//                     <td>{rule.rulename}</td>\n//                     <td>{rule.media_type}</td>\n//                     <td>{rule.description}</td>\n//                     <td>{rule.created_by}</td>\n//                     <td>{renderStatusIcon(rule.rule_status)} {rule.rule_status}</td>\n//                     {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                       <td className='edit-delete-status'>\n//                         {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n//                           <button className=\"rules__edit-button\" onClick={(e) => { e.stopPropagation(); handleEditRule(rule); }}><FaEdit /></button>\n//                         )}\n//                         {(userRole === roles.SUPERADMIN) && (\n//                           <button className=\"rules__delete-button\" onClick={(e) => { e.stopPropagation(); handleDeleteRule(rule); }}><FaTrash /></button>\n//                         )}\n//                       </td>\n//                     )}\n//                   </tr>\n//                 </React.Fragment>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE ? 6 : 5}>No rules found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewRule && (\n//         <AddNewRule \n//           onClose={() => setShowAddNewRule(false)}\n//           onAddRule={handleAddRule} \n//         />\n//       )}\n//       {showEditRule && (\n//         <EditRule\n//           onClose={() => {\n//             setShowEditRule(false);\n//             fetchRules(); // Refresh the rules after edit\n//           }}\n//           rule={currentRule}\n//         />\n//       )}\n//       {showDeleteRule && (\n//         <DeleteRule\n//           onClose={() => setShowDeleteRule(false)}\n//           onDelete={() => confirmDeleteRule(currentRule)}\n//           rule={currentRule}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Rules;\n\n\n\n\n\n\n\n\n\n\n\n\n//CHANGES FOR THE 'PENDING' ACTIONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './Rules.css';\nimport { FaEdit, FaTrash, FaSearch, FaTimesCircle } from 'react-icons/fa';\nimport { IoMdCheckmarkCircleOutline, IoIosHourglass } from 'react-icons/io';\nimport AddNewRule from './AddNewRule';\nimport EditRule from './EditRule';\nimport DeleteRule from './DeleteRule';\nimport ApproveDeclineStatus from './ApproveDeclineStatus';\nimport Spinner from './Spinner'; // Import Spinner\n\nconst roles = {\n  SUPERADMIN: 'SuperAdmin',\n  ADMIN: 'Admin',\n  WRITE: 'Write',\n  READ: 'Read',\n};\n\nfunction Rules() {\n  const [rules, setRules] = useState([]);\n  const [allRules, setAllRules] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showAddNewRule, setShowAddNewRule] = useState(false);\n  const [showEditRule, setShowEditRule] = useState(false);\n  const [showDeleteRule, setShowDeleteRule] = useState(false);\n  const [showApproveDecline, setShowApproveDecline] = useState(false);\n  const [currentRule, setCurrentRule] = useState(null);\n  const [loading, setLoading] = useState(false); // State for loading\n  const [expandedRow, setExpandedRow] = useState(null); // State for expanded row\n  const [statusFilter, setStatusFilter] = useState(''); // State for dropdown\n  const [userRole, setUserRole] = useState(null);\n\n  useEffect(() => {\n    fetchRules();\n    // Assume user data is stored in localStorage\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (userData) {\n      setUserRole(userData[6]);\n    }\n  }, []);\n\n  const fetchRules = async (status = '') => {\n    setLoading(true); // Start loading\n    try {\n      const response = await fetch(`/list_rules?status=${status}`);\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        setAllRules(data.data);\n        setRules(data.data);\n      } else {\n        console.error('Failed to fetch rules:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching rules:', error);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  const fetchFilteredRules = async (term, status = '') => {\n    setLoading(true); // Start loading\n    try {\n      const response = await fetch(`/filter_rules?search=${term}&status=${status}`);\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        setRules(data.data);\n      } else {\n        console.error('Failed to fetch rules:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching rules:', error);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  const debouncedFetchFilteredRules = useCallback(debounce((term, status) => fetchFilteredRules(term, status), 300), []);\n\n  const handleSearchChange = (e) => {\n    const { value } = e.target;\n    setSearchTerm(value);\n    debouncedFetchFilteredRules(value, statusFilter);\n  };\n\n  const handleAddRule = async (newRule) => {\n    setLoading(true); // Start loading\n    try {\n      const response = await fetch(`/add_rule`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newRule)\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Rule added successfully!');\n        fetchRules(); // Refresh rules list\n      } else {\n        alert('Failed to add rule: ' + data.data);\n      }\n    } catch (error) {\n      console.error('Error adding rule:', error);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  const handleEditRule = (rule) => {\n    setCurrentRule(rule);\n    setShowEditRule(true);\n  };\n\n  const handleDeleteRule = (rule) => {\n    setCurrentRule(rule);\n    setShowDeleteRule(true);\n  };\n\n  const confirmDeleteRule = async (rule) => {\n    setLoading(true); // Start loading\n    try {\n      const response = await fetch(`/delete_rule`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ rule_id: rule.rule_id })\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('Rule deleted successfully!');\n        fetchRules(); // Refresh rules list\n      } else {\n        alert('Failed to delete rule: ' + data.data);\n      }\n    } catch (error) {\n      console.error('Error deleting rule:', error);\n      alert('Error deleting rule');\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  const handleStatusClick = (rule) => {\n    setCurrentRule(rule);\n    setShowApproveDecline(true);\n  };\n\n  const handleRowClick = (rule) => {\n    if (expandedRow === rule.id) {\n      setExpandedRow(null);\n    } else {\n      setExpandedRow(rule.id);\n    }\n  };\n\n  const handleStatusFilterChange = (e) => {\n    const { value } = e.target;\n    setStatusFilter(value);\n    fetchRules(value);\n  };\n\n  const renderStatusIcon = (status) => {\n    switch (status) {\n      case 'approved':\n        return <IoMdCheckmarkCircleOutline className=\"status-icon approved\" />;\n      case 'pending':\n        return (\n          <span className=\"status-icon pending\" onClick={() => handleStatusClick(currentRule)}>\n            <IoIosHourglass />\n          </span>\n        );\n      case 'declined':\n        return <FaTimesCircle className=\"status-icon declined\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"rules\">\n      <div className=\"rules-heading\">\n        <div className=\"rules-header\">\n          <div className='rule-page-header'>Rules</div>\n          <select\n            className=\"rules-status-dropdown\"\n            value={statusFilter}\n            onChange={handleStatusFilterChange}\n          >\n            <option value=\"\">All Rules</option>\n            <option value=\"approved\">Approved Rules</option>\n            <option value=\"pending\">Pending Rules</option>\n            <option value=\"declined\">Declined Rules</option>\n          </select>\n        </div>\n        <div className=\"rules-search-add\">\n          <div className=\"rules-search-wrapper\">\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={handleSearchChange}\n              placeholder=\"Search By Rule Name / Media Type\"\n              className=\"rules-search-input\"\n            />\n            <FaSearch className=\"rules-search-icon\" />\n          </div>\n          {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n            <button className=\"rules__add-new-button\" onClick={() => setShowAddNewRule(true)}>+ Add New</button>\n          )}\n        </div>\n      </div>\n      <table className=\"rules__content-table\">\n        <thead>\n          <tr>\n            <th>Rule Name</th>\n            <th>Media Type</th>\n            <th>Description</th>\n            <th>Created By</th>\n            <th>Rule Status</th>\n            {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && <th>Action</th>}\n          </tr>\n        </thead>\n        {loading ? (\n          <div className=\"loader\">\n            <Spinner />\n          </div>\n        ) : (\n          <tbody>\n            {rules.length > 0 ? (\n              rules.map((rule, index) => (\n                <React.Fragment key={index}>\n                  <tr onClick={() => handleRowClick(rule)} className=\"rules__rule-row\">\n                    <td>{rule.rulename}</td>\n                    <td>{rule.media_type}</td>\n                    <td>{rule.description}</td>\n                    <td>{rule.created_by}</td>\n                    <td className='testing' onClick={() => rule.rule_status === 'pending' && handleStatusClick(rule)}>{renderStatusIcon(rule.rule_status)} {rule.rule_status}</td>\n                    {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n                      <td className='edit-delete-status'>\n                        {(userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE) && (\n                          <button className=\"rules__edit-button\" onClick={(e) => { e.stopPropagation(); handleEditRule(rule); }}><FaEdit /></button>\n                        )}\n                        {(userRole === roles.SUPERADMIN) && (\n                          <button className=\"rules__delete-button\" onClick={(e) => { e.stopPropagation(); handleDeleteRule(rule); }}><FaTrash /></button>\n                        )}\n                      </td>\n                    )}\n                  </tr>\n                </React.Fragment>\n              ))\n            ) : (\n              <tr>\n                <td colSpan={userRole === roles.SUPERADMIN || userRole === roles.ADMIN || userRole === roles.WRITE ? 6 : 5}>No rules found</td>\n              </tr>\n            )}\n          </tbody>\n        )}\n      </table>\n      {showAddNewRule && (\n        <AddNewRule \n          onClose={() => setShowAddNewRule(false)}\n          onAddRule={handleAddRule} \n        />\n      )}\n      {showEditRule && (\n        <EditRule\n          onClose={() => {\n            setShowEditRule(false);\n            fetchRules(); // Refresh the rules after edit\n          }}\n          rule={currentRule}\n        />\n      )}\n      {showDeleteRule && (\n        <DeleteRule\n          onClose={() => setShowDeleteRule(false)}\n          onDelete={() => confirmDeleteRule(currentRule)}\n          rule={currentRule}\n        />\n      )}\n      {showApproveDecline && (\n        <ApproveDeclineStatus\n          onClose={() => setShowApproveDecline(false)}\n          rule={currentRule}\n          fetchRules={fetchRules}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction debounce(func, wait) {\n  let timeout;\n  return function (...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nexport default Rules;\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport './Spinner.css';  // Import the CSS for the spinner\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\"></div>\n  );\n}\n\nexport default Spinner;\n"],"names":["_ref","onClose","onAddRule","userLocalData","JSON","parse","localStorage","getItem","formData","setFormData","useState","title","description","mediaType","disclaimer","assigned_to","created_by","concat","users","setUsers","useEffect","fetchUsers","async","response","fetch","data","json","body","status","console","error","log","handleChange","e","name","value","target","_jsx","className","children","_jsxs","onClick","type","onChange","required","placeholder","disabled","map","user","role","email","userID","handleAdd","rulename","media_type","alert","rule","setTitle","setMediaType","setDescription","setDisclaimer","method","headers","stringify","rule_id","onDelete","handleDelete","fetchRules","changeRuleStatus","newStatus","roles","rules","setRules","allRules","setAllRules","searchTerm","setSearchTerm","showAddNewRule","setShowAddNewRule","showEditRule","setShowEditRule","showDeleteRule","setShowDeleteRule","showApproveDecline","setShowApproveDecline","currentRule","setCurrentRule","loading","setLoading","expandedRow","setExpandedRow","statusFilter","setStatusFilter","userRole","setUserRole","userData","arguments","length","undefined","debouncedFetchFilteredRules","useCallback","func","wait","timeout","_len","args","Array","_key","later","clearTimeout","setTimeout","debounce","term","fetchFilteredRules","handleStatusClick","renderStatusIcon","IoMdCheckmarkCircleOutline","IoIosHourglass","FaTimesCircle","FaSearch","Spinner","index","React","id","handleRowClick","rule_status","stopPropagation","handleEditRule","FaEdit","handleDeleteRule","FaTrash","colSpan","AddNewRule","newRule","EditRule","DeleteRule","confirmDeleteRule","ApproveDeclineStatus"],"sourceRoot":""}