{"version":3,"file":"static/js/825.7661e22a.chunk.js","mappings":"mNAmzKA,QA1SA,WACE,MAAOA,EAAkBC,IAAuBC,EAAAA,EAAAA,UAAS,KAClDC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAwBC,IAA6BJ,EAAAA,EAAAA,UAAS,KAC9DK,EAAsBC,IAA2BN,EAAAA,EAAAA,UAAS,KAC1DO,EAAaC,IAAkBR,EAAAA,EAAAA,WAAS,IACxCS,EAAmBC,IAAwBV,EAAAA,EAAAA,WAAS,IACpDW,EAAeC,IAAoBZ,EAAAA,EAAAA,UAAS,KAC5Ca,EAASC,IAAcd,EAAAA,EAAAA,WAAS,IAChCe,EAAUC,IAAehB,EAAAA,EAAAA,UAAS,KAClCiB,EAAoBC,IAAyBlB,EAAAA,EAAAA,UAAS,KACtDmB,EAAaC,IAAkBpB,EAAAA,EAAAA,UAAS,MACzCqB,GAAeC,EAAAA,EAAAA,QAAO,MAEtBC,EAAU,CACd,CAAEC,MAAO,iBAAkBC,MAAO,kBAClC,CAAED,MAAO,iBAAkBC,MAAO,oBAGpCC,EAAAA,EAAAA,YAAU,KACRC,IACAT,EAAsBK,EAAQ,GAC7B,IAEH,MAAMI,EAAgBC,UACpB,IACE,MAAMC,QAAiBC,MAAM,kBACvBC,QAAaF,EAASG,OACH,YAArBD,EAAKE,KAAKC,OACZlB,EAAYe,EAAKE,KAAKF,MAEtBI,QAAQC,MAAM,4BAA6BL,EAAKA,KAEpD,CAAE,MAAOK,GACPD,QAAQC,MAAM,2BAA4BA,EAC5C,GAsBIC,EAAgBT,UACpBU,EAAMC,iBACN,MAAMC,EAAOnB,EAAaoB,QAAQC,MAAM,GACxC,IAAKF,IAASvC,EAEZ,YADA0C,MAAM,0CAIR,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQN,GACxBI,EAASE,OAAO,eAAgB7C,GAChC2C,EAASE,OAAO,YAAaC,KAAKC,UAAU/B,EAAmBgC,KAAIC,GAAaA,EAAU1B,UAE1FV,GAAW,GACXN,GAAe,GACfE,GAAqB,GAErB,IACE,MAAMmB,QAAiBC,MAAM,oBAAqB,CAChDqB,OAAQ,OACRlB,KAAMW,IAGFQ,QAAevB,EAASG,OAEF,YAAxBoB,EAAOC,MAAMnB,QAAgD,YAAxBkB,EAAOE,MAAMpB,OAClB,IAA9BjB,EAAmBsC,QACnBtC,EAAmBuC,MAAKC,GAAmB,mBAAbA,EAAGjC,SACjCP,EAAmBuC,MAAKC,GAAmB,mBAAbA,EAAGjC,SACnCpB,EAA0BgD,EAAOC,MAAMtB,MACvCI,QAAQuB,IAAI,4BAA6BN,EAAOC,MAAMtB,MACtDzB,EAAwB8C,EAAOE,MAAMvB,KAAK,GAAG4B,OAC7CxB,QAAQuB,IAAI,4BAA6BN,EAAOE,MAAMvB,KAAK,GAAG4B,OAC9DnD,GAAe,IAEsB,IAA9BS,EAAmBsC,QAAgD,mBAAhCtC,EAAmB,GAAGO,OAChEpB,EAA0BgD,EAAOC,MAAMtB,MACvCzB,EAAwB,IACxBE,GAAe,IAEsB,IAA9BS,EAAmBsC,QAAgD,mBAAhCtC,EAAmB,GAAGO,OAC5D4B,EAAOE,OAASF,EAAOE,MAAMvB,KAAK,IAAMqB,EAAOE,MAAMvB,KAAK,GAAG4B,QAC/DrD,EAAwB8C,EAAOE,MAAMvB,KAAK,GAAG4B,OAC7CvD,EAA0B,IAC1BI,GAAe,KAInBI,EAAiBwC,EAAOrB,MACxBrB,GAAqB,GAEzB,CAAE,MAAO0B,GACPxB,EAAiBwB,EAAMwB,SACvBlD,GAAqB,EACvB,CAAC,QACCI,GAAW,EACb,GAGI+C,EAAeT,IACnB,MAAM5B,EAAQ4B,EAAOU,kBACrB,MAAqB,kBAAVtC,EACFA,EAAMuC,cAAcC,SAAS,MAAQ,SAAW,UAElD,QAAQ,EAwBjB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAKE,UAAU,yBAAwBD,SAAA,EACrCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,gCAA+BD,SAAC,4BAC/CD,EAAAA,EAAAA,MAAA,QAAME,UAAU,8BAA8BE,SAAUhC,EAAc6B,SAAA,EAEpED,EAAAA,EAAAA,MAAA,OAAKE,UAAU,yDAAwDD,SAAA,EACrED,EAAAA,EAAAA,MAAA,UAAQzC,MAAOvB,EAAaqE,SAvGLhC,IAC/BpC,EAAeoC,EAAMiC,OAAO/C,MAAM,EAsGqCgD,UAAQ,EAAAN,SAAA,EACrEE,EAAAA,EAAAA,KAAA,UAAQ5C,MAAM,GAAGiD,UAAQ,EAAAP,SAAC,wBACzBnD,EAASkC,KAAKyB,IACbN,EAAAA,EAAAA,KAAA,UAAgC5C,MAAOkD,EAAQC,YAAYT,SAAEQ,EAAQC,aAAxDD,EAAQE,iBAGzBR,EAAAA,EAAAA,KAAA,SAAAF,SAAO,qBAGTD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,qDAAoDD,SAAA,EACjEE,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CACLC,SAAO,EACPC,mBAAmB,EACnBC,KAAK,aACLzD,QAASA,EACTC,MAAOP,EACPkD,UAAU,qBACVc,gBAAgB,SAChBX,SArHcY,IACxBhE,EAAsBgE,EAAgB,EAqH5BC,YAAY,SACZX,UAAQ,KAEVJ,EAAAA,EAAAA,KAAA,SAAAF,SAAO,wBAGTE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,0EAAyED,UACtFD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,cAAaD,SAAA,EAC1BE,EAAAA,EAAAA,KAAA,SAAOgB,KAAK,OAAOD,YAAY,IAAIE,UAAQ,EAAC7D,MAAO1B,KACnDsE,EAAAA,EAAAA,KAAA,SAAAF,SAAO,YACPE,EAAAA,EAAAA,KAAA,UAAQgB,KAAK,SAASjB,UAAU,gBAAgBmB,QAxIlCC,KACxBlE,EAAaoB,QAAQ+C,OAAO,EAuIyDtB,SAAC,YAC5EE,EAAAA,EAAAA,KAAA,SACEgB,KAAK,OACLK,GAAG,YACHC,MAAO,CAAEC,QAAS,QAClBC,IAAKvE,EACLiD,SArJYhC,IACxB,MAAME,EAAOF,EAAMiC,OAAO7B,MAAM,GAC5BF,GACFzC,EAAoByC,EAAKwC,KAC3B,aAsJIZ,EAAAA,EAAAA,KAAA,OAAKD,UAAU,uBAAsBD,UACnCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,+BAA8BD,UAC3CE,EAAAA,EAAAA,KAAA,UAAQkB,QAASjD,EAAe8B,UAAU,iBAAgBD,SAAC,mBAIhErD,IACCuD,EAAAA,EAAAA,KAAA,OAAKD,UAAU,SAAQD,SAAC,eAEzB3D,IACC0D,EAAAA,EAAAA,MAAA,OAAKE,UAAU,qBAAoBD,SAAA,EACjCE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,wBACJD,EAAAA,EAAAA,MAAA,UAAQE,UAAU,kBAAkBmB,QAhFtBO,KACpB,MACM9D,EAAO5B,EAAuB8C,KAAI,CAACG,EAAQ0C,KAAK,CACpD,UAAWA,EAAQ,EACnB,OAAU1C,EAAO2C,WACjB,oBAAqB3C,EAAO4C,sBAGxBC,EADiB,IAAIC,EAAAA,GAAO,CAAEC,OANrB,CAAC,UAAW,SAAU,uBAOVC,MAAMrE,GAC3BsE,EAAO,IAAIC,KAAK,CAACL,GAAM,CAAEb,KAAM,6BACrCmB,EAAAA,EAAAA,QAAOF,EAAM,+BAA+B,EAsEqBnC,SAAA,EACzDE,EAAAA,EAAAA,KAACoC,EAAAA,IAAU,CAACrC,UAAU,kBAAkB,qBAGzChE,EAAuBoD,OAAS,IAC/BU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,4BACJD,EAAAA,EAAAA,MAAA,SAAOE,UAAU,+BAA8BD,SAAA,EAC7CE,EAAAA,EAAAA,KAAA,SAAAF,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,WACJE,EAAAA,EAAAA,KAAA,eAGJA,EAAAA,EAAAA,KAAA,SAAAF,SACG/D,EAAuB8C,KAAI,CAACI,EAAOyC,KAClC7B,EAAAA,EAAAA,MAACwC,EAAAA,SAAc,CAAAvC,SAAA,EACbE,EAAAA,EAAAA,KAAA,MAAIkB,QAASA,IApFTQ,KAEpB1E,EADED,IAAgB2E,EACH,KAEAA,EACjB,EA+EqCY,CAAeZ,GAAQ3B,UAAU,qBAAoBD,UACtED,EAAAA,EAAAA,MAAA,MAAIE,UAAU,mBAAkBD,SAAA,CAAEb,EAAMsD,UACrCxF,IAAgB2E,GAAQ1B,EAAAA,EAAAA,KAACwC,EAAAA,IAAW,KAAMxC,EAAAA,EAAAA,KAACyC,EAAAA,IAAa,SAG5D1F,IAAgB2E,IACf1B,EAAAA,EAAAA,KAAA,MAAID,UAAU,cAAaD,UACzBE,EAAAA,EAAAA,KAAA,MAAI0C,QAAQ,IAAG5C,UACbD,EAAAA,EAAAA,MAAA,SAAOE,UAAU,gBAAeD,SAAA,EAC9BE,EAAAA,EAAAA,KAAA,SAAAF,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,eACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,qBACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,uBACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,6BAGRE,EAAAA,EAAAA,KAAA,SAAAF,SACGb,EAAM0D,QAAQ9D,KAAI,CAAC+D,EAAMC,KACxBhD,EAAAA,EAAAA,MAAA,MAAoBE,UAAWN,EAAYmD,GAAM9C,SAAA,EAC/CE,EAAAA,EAAAA,KAAA,MAAAF,SAAK8C,EAAKE,aACV9C,EAAAA,EAAAA,KAAA,MAAAF,SAAK8C,EAAKG,mBACV/C,EAAAA,EAAAA,KAAA,MAAAF,SAAK8C,EAAKlD,qBACVM,EAAAA,EAAAA,KAAA,MAAAF,SAAK8C,EAAKI,uBAJHH,gBApBFnB,aAuC9BzF,EAAqBkD,OAAS,IAC7BU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,4BACJD,EAAAA,EAAAA,MAAA,SAAOE,UAAU,+BAA8BD,SAAA,EAC7CE,EAAAA,EAAAA,KAAA,SAAAF,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,eACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,qBACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,uBACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,6BAGRE,EAAAA,EAAAA,KAAA,SAAAF,SACG7D,EAAqB4C,KAAI,CAACG,EAAQ0C,KACjC7B,EAAAA,EAAAA,MAAA,MAAgBE,UAAWN,EAAYT,GAAQc,SAAA,EAC7CE,EAAAA,EAAAA,KAAA,MAAAF,SAAKd,EAAO8D,aACZ9C,EAAAA,EAAAA,KAAA,MAAAF,SAAKd,EAAO+D,mBACZ/C,EAAAA,EAAAA,KAAA,MAAAF,SAAKd,EAAOU,qBACZM,EAAAA,EAAAA,KAAA,MAAAF,SAAKd,EAAOgE,uBAJLtB,gBAatBrF,IACCwD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,qBAAoBD,SAAA,EACjCE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,+BACJE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,iBAAgBD,SAC5BvD,SAMb,C","sources":["components/ValidateVideoContent.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n\n// function ValidateVideoContent() {\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [mediaType, setMediaType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     fetchRules();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const fetchRules = async () => {\n//     try {\n//       const response = await fetch(`/list_rules`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data.map(rule => ({ value: rule[0], label: rule[1] })));\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleMediaTypeChange = (event) => {\n//     setMediaType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedRules(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !mediaType) {\n//       alert('Please select a file and media type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('media_type', mediaType);\n    // formData.append('rules', JSON.stringify(selectedRules.map(rule => [rule.value, rule.label])));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       if (result.status === 'SUCCESS') {\n//         console.log('Validation successful:', result.data);\n//         setValidationResults([{ \"Video duration\": result.data }]);\n//         setShowResults(true);\n//       } else {\n//         console.error('Validation failed:', result.data);\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       console.error('Error during validation:', error);\n//       setShowResults(false);\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = Object.values(result)[0];\n//     if (typeof value === 'string') {\n//       const lowerValue = value.toLowerCase();\n//       return lowerValue.includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Title\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Title\": Object.keys(result)[0],\n//       \"Validation Result\": Object.values(result)[0] + ' sec',\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <h2>Validate Video Content</h2>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={mediaType} onChange={handleMediaTypeChange} required>\n//               <option value=\"\" disabled>Select</option>\n//               <option value=\"Video\">Video</option>\n//               <option value=\"GIF\">GIF</option>\n//             </select>\n//             <label>Media Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"rules\"\n//               options={rules}\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search \"\n//               required\n//             />\n//             <label>Select Rules*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>Download Excel</button>\n//           <table className=\"results-table\">\n//             <thead>\n//               <tr>\n//                 <th>Sr. No.</th>\n//                 <th>Title</th>\n//                 <th>Validation Result</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {validationResults.map((result, index) => (\n//                 <tr key={index} className={getRowColor(result)}>\n//                   <td>{index + 1}</td>\n//                   <td>{Object.keys(result)[0]}</td>\n//                   <td>{Object.values(result)[0]} sec</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage } from 'react-icons/fa'; // Import the image icon from react-icons\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [mediaType, setMediaType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [rules, setRules] = useState([]);\n//   const [selectedRules, setSelectedRules] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   useEffect(() => {\n//     fetchRules();\n//   }, []);\n\n\n//   const fetchRules = async () => {\n//     try {\n//       const response = await fetch(`/list_rules`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setRules(data.data.map(rule => ({ value: rule[0], label: rule[1] })));\n//       } else {\n//         console.error('Failed to fetch rules:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching rules:', error);\n//     }\n//   };\n\n\n\n\n\n//   //********************************************** */\n//   const [programs, setPrograms] = useState([]);\n//   const [programType, setProgramType] = useState('');\n//   const [operations, setOperations] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setPrograms(data.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n//   //********************************************** */\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleMediaTypeChange = (event) => {\n//     setMediaType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and media type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     //************************************************** */\n//     // formData.append('media_type', mediaType);\n//     formData.append('program_type', programType);\n//     //************************************************** */\n//     formData.append('operations', JSON.stringify(selectedOperations.map(operations => [operations.value, operations.label])));\n\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       if (result.status === 'SUCCESS') {\n//         console.log('Validation successful:', result.data);\n//         setValidationResults(result.data); // Assuming the API returns the data in the expected format\n//         setShowResults(true);\n//       } else {\n//         console.error('Validation failed:', result.data);\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       console.error('Error during validation:', error);\n//       setShowResults(false);\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.validation_result;\n//     if (typeof value === 'string') {\n//       const lowerValue = value.toLowerCase();\n//       return lowerValue.includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <h2>Validate Video Content</h2>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           {/* <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={mediaType} onChange={handleMediaTypeChange} required>\n//               <option value=\"\" disabled>Select</option>\n//               <option value=\"Video\">Video</option>\n//               <option value=\"GIF\">GIF</option>\n//             </select>\n//             <label>Media Type</label>\n//           </div> */}\n//           {/* <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select</option>\n//               {programs.map((program, index) => (\n//                 <option key={index} value={program[0]}>{program[0]}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div> */}\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"rules\"\n//               options={options}\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search \"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select</option>\n//               {programs.map((program, index) => (\n//                 <option key={index} value={program[0]}>{program[0]}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n//         </form>\n        // <div className=\"uploaded-and-analyze\">\n        //   <div className='analyze-button-repositioning'>\n        //     <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n        //   </div>\n        // </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>Download Excel</button>\n//           <table className=\"results-table\">\n//             <thead>\n//               <tr>\n//                 <th>Sr. No.</th>\n//                 <th>Frames</th>\n//                 <th>Validation Result</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {validationResults.map((result, index) => (\n//                 <tr key={index} className={getRowColor(result)}>\n//                   <td>{index + 1}</td>\n//                   <td>\n//                     <FaImage /> {result.frame_name}\n//                   </td>\n//                   <td>{result.validation_result}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   useEffect(() => {\n//     fetchPrograms();\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operations', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.validation_result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>Download Excel</button>\n//           <table className=\"results-table\">\n//             <thead>\n//               <tr>\n//                 <th>Sr. No.</th>\n//                 <th>Frames</th>\n//                 <th>Validation Result</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {validationResults.map((result, index) => (\n//                 <tr key={index} className={getRowColor(result)}>\n//                   <td>{index + 1}</td>\n//                   <td>\n//                     <FaImage /> {result.frame_name}\n//                   </td>\n//                   <td>{result.validation_result}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// BELOW\n//WORKINGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFFFIIIIIIIIIIIIIIIIINNNNNNNNNNNNNEEEEEEEEEEEEEE\n//ABOVE\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage } from 'react-icons/fa';\n// import { FaDownload } from 'react-icons/fa';\n\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operations', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.validation_result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>Download Excel</button>\n//           <table className=\"results-table\">\n//             <thead>\n//               <tr>\n//                 <th>Sr. No.</th>\n//                 <th>Frames</th>\n//                 <th>Validation Result</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {validationResults.map((result, index) => (\n//                 <tr key={index} className={getRowColor(result)}>\n//                   <td>{index + 1}</td>\n//                   <td>\n//                     <FaImage /> {result.frame_name}\n//                   </td>\n//                   <td>{result.validation_result}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n//           <table className=\"results-table\">\n//             <thead>\n//               <tr>\n//                 <th>Image </th>\n//                 <th>Rule Name</th>\n//                 <th>Rule</th>\n//                 <th>Validation Result</th>\n//                 <th>Validation Comment</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {validationResults.map((result, index) => (\n//                 <tr key={index} className={getRowColor(result)}>\n//                   <td>{result[0]}</td>\n//                   <td>{result[1]}</td>\n//                   <td>{result[2]}</td>\n//                   <td>{result[3]}</td>\n//                   <td>{result[4]}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage, FaDownload } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operations', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.validation_result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const frameAnalysisResults = validationResults.filter(result => result.operation === 'frame_analysis');\n//   const audioAnalysisResults = validationResults.filter(result => result.operation === 'audio_analysis');\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {frameAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.frame_name}</td>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule}</td>\n//                       <td>{result.validation_result}</td>\n//                       <td>{result.validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Audio</th>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.audio_name}</td>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule}</td>\n//                       <td>{result.validation_result}</td>\n//                       <td>{result.validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage, FaDownload } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operations', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     console.log(\"validation inputtttt: \", formData);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const frameAnalysisResults = validationResults.filter(result => result.operation === 'frame_analysis');\n//   const audioAnalysisResults = validationResults.filter(result => result.operation === 'audio_analysis');\n\n//   const renderFrameAnalysisResults = () => {\n//     return Object.keys(frameAnalysisResults).map((frameName, index) => {\n//       const rules = frameAnalysisResults[frameName];\n//       return rules.map((rule, ruleIndex) => (\n//         <tr key={`${index}-${ruleIndex}`} className={getRowColor(rule)}>\n//           <td>{frameName}</td>\n//           <td>{rule.rule_name}</td>\n//           <td>{rule.Applicable}</td>\n//           <td>{rule.result}</td>\n//         </tr>\n//       ));\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {Object.keys(frameAnalysisResults).length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th>Rule Name</th>\n//                     <th>Applicable</th>\n//                     <th>Validation Result</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {renderFrameAnalysisResults()}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Audio</th>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.audio_name}</td>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule}</td>\n//                       <td>{result.validation_result}</td>\n//                       <td>{result.validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage, FaDownload } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operations', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const frameAnalysisResults = validationResults.filter(result => result.operation === 'frame_analysis');\n//   const audioAnalysisResults = validationResults.filter(result => result.operation === 'audio_analysis');\n\n//   const renderFrameAnalysisResults = () => {\n//     return frameAnalysisResults.map((frame, index) => (\n//       Object.entries(frame).map(([frameName, rules]) =>\n//         rules.map((rule, ruleIndex) => (\n//           <tr key={`${index}-${ruleIndex}`} className={getRowColor(rule)}>\n//             <td>{frameName}</td>\n//             <td>{rule.rule_name}</td>\n//             <td>{rule.Applicable}</td>\n//             <td>{rule.result}</td>\n//           </tr>\n//         ))\n//       )\n//     ));\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th>Rule Name</th>\n//                     <th>Applicable</th>\n//                     <th>Validation Result</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {renderFrameAnalysisResults()}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Audio</th>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.audio_name}</td>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule}</td>\n//                       <td>{result.validation_result}</td>\n//                       <td>{result.validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage, FaDownload } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n//     // formData.append('operation', 'frame_analysis');\n\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const frameAnalysisResults = validationResults.filter(result => result.operation === 'frame_analysis');\n//   const audioAnalysisResults = validationResults.filter(result => result.operation === 'audio_analysis');\n\n//   const renderFrameAnalysisResults = () => {\n//     return frameAnalysisResults.map((frame, index) => (\n//       Object.entries(frame).map(([frameName, rules]) =>\n//         rules.map((rule, ruleIndex) => (\n//           <tr key={`${index}-${ruleIndex}`} className={getRowColor(rule)}>\n//             <td>{frameName}</td>\n//             <td>{rule.rule_name}</td>\n//             <td>{rule.Applicable}</td>\n//             <td>{rule.result}</td>\n//           </tr>\n//         ))\n//       )\n//     ));\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th>Rule Name</th>\n//                     <th>Applicable</th>\n//                     <th>Validation Result</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {renderFrameAnalysisResults()}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Audio</th>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.audio_name}</td>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule}</td>\n//                       <td>{result.validation_result}</td>\n//                       <td>{result.validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage, FaDownload } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const frameAnalysisResults = validationResults.filter(result => result.operation === 'frame_analysis');\n//   const audioAnalysisResults = validationResults.filter(result => result.operation === 'audio_analysis');\n\n//   const renderFrameAnalysisResults = () => {\n//     return frameAnalysisResults.map((frame, index) => (\n//       Object.entries(frame).map(([frameName, rules]) =>\n//         rules.map((rule, ruleIndex) => (\n//           <tr key={`${index}-${ruleIndex}`} className={getRowColor(rule)}>\n//             <td>{frameName}</td>\n//             <td>{rule.rule_name}</td>\n//             <td>{rule.Applicable}</td>\n//             <td>{rule.result}</td>\n//           </tr>\n//         ))\n//       )\n//     ));\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th>Rule Name</th>\n//                     <th>Applicable</th>\n//                     <th>Validation Result</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {renderFrameAnalysisResults()}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Audio</th>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.audio_name}</td>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule}</td>\n//                       <td>{result.validation_result}</td>\n//                       <td>{result.validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaImage, FaDownload } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const renderFrameAnalysisResults = () => {\n//     return validationResults.map((frame, index) => (\n//       frame.results.map((rule, ruleIndex) => (\n//         <tr key={`${index}-${ruleIndex}`} className={getRowColor(rule)}>\n//           <td>{frame.file_name}</td>\n//           <td>{rule.rule_name}</td>\n//           <td>{rule.rule_definition}</td>\n//           <td>{rule.Validation_result}</td>\n//           <td>{rule.Validation_comment}</td>\n//         </tr>\n//       ))\n//     ));\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n\n          \n//         </form>\n//         {/* <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button type=\"submit\" className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div> */}\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {validationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Frame</th>\n//                     <th>Rule Name</th>\n//                     <th>Rule Defination</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {renderFrameAnalysisResults()}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n// ABOVE IS WORKING FINE BUT CHANGES ARE MADE FOR THE IMAGE AND THE ALL DATaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//VVVVVVVVVVVVVVVVVVIIIIIIIIIIIIIIIIIIIPPPPPPPPPPPPPPPPPPPPPP\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [validationResults, setValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         setValidationResults(result.data);\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = validationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const handleRowClick = (index) => {\n//     if (expandedRow === index) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(index);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {validationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th></th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n                  // {validationResults.map((frame, index) => (\n                  //   <React.Fragment key={index}>\n                  //     <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n                  //       <td className='frame-open-close'>{frame.file_name}\n                  //         {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n                  //       </td>\n                  //     </tr>\n                  //     {expandedRow === index && (\n                  //       <tr className=\"details-row\">\n                  //         <td colSpan=\"2\">\n                  //           <table className=\"details-table\">\n                  //             <thead>\n                  //               <tr>\n                  //                 <th>Rule Name</th>\n                  //                 <th>Rule Definition</th>\n                  //                 <th>Validation Result</th>\n                  //                 <th>Validation Comment</th>\n                  //               </tr>\n                  //             </thead>\n                  //             <tbody>\n                  //               {frame.results.map((rule, ruleIndex) => (\n                  //                 <tr key={ruleIndex} className={getRowColor(rule)}>\n                  //                   <td>{rule.rule_name}</td>\n                  //                   <td>{rule.rule_defination}</td>\n                  //                   <td>{rule.Validation_result}</td>\n                  //                   <td>{rule.Validation_comment}</td>\n                  //                 </tr>\n                  //               ))}\n                  //             </tbody>\n                  //           </table>\n                  //         </td>\n                  //       </tr>\n                  //     )}\n                  //   </React.Fragment>\n                  // ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [frameValidationResults, setFrameValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const [audioAnalysisResults, setAudioAnalysisResults] = useState([]); // New analysis results state\n//   const fileInputRef = useRef(null);\n\n//   // console.log(\"AUDIO ANALYSIS result is:   \", audioAnalysisResults);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result.Data2); // Log result for debugging\n//       if (result.status === 'Success') {\n//         // setFrameValidationResults(result.data);\n//         setAudioAnalysisResults(result.Data2.Data2); // Set new analysis results\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = frameValidationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const handleRowClick = (index) => {\n//     if (expandedRow === index) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(index);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameValidationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th></th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {frameValidationResults.map((frame, index) => (\n//                     <React.Fragment key={index}>\n//                       <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n//                         <td className='frame-open-close'>{frame.file_name}\n//                           {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n//                         </td>\n//                       </tr>\n//                       {expandedRow === index && (\n//                         <tr className=\"details-row\">\n//                           <td colSpan=\"2\">\n//                             <table className=\"details-table\">\n//                               <thead>\n//                                 <tr>\n//                                   <th>Rule Name</th>\n//                                   <th>Rule Definition</th>\n//                                   <th>Validation Result</th>\n//                                   <th>Validation Comment</th>\n//                                 </tr>\n//                               </thead>\n//                               <tbody>\n//                                 {frame.results.map((rule, ruleIndex) => (\n//                                   <tr key={ruleIndex} className={getRowColor(rule)}>\n//                                     <td>{rule.rule_name}</td>\n//                                     <td>{rule.rule_defination}</td>\n//                                     <td>{rule.Validation_result}</td>\n//                                     <td>{rule.Validation_comment}</td>\n//                                   </tr>\n//                                 ))}\n//                               </tbody>\n//                             </table>\n//                           </td>\n//                         </tr>\n//                       )}\n//                     </React.Fragment>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>New Analysis Results</h4>\n//               <table className=\"audio_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule}</td>\n//                       <td>{result.validation_result}</td>\n//                       <td>{result.validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [frameValidationResults, setFrameValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const [audioAnalysisResults, setAudioAnalysisResults] = useState([]); // New analysis results state\n//   const fileInputRef = useRef(null);\n\n//   // console.log(\"AUDIO ANALYSIS result is:   \", audioAnalysisResults);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         // Assuming Data1 is for frame validation and Data2 is for audio analysis\n//         if (result.Data1) {\n//           setFrameValidationResults(result.Data1.Data1); // Set frame validation results\n//         }\n//         // if (result.Data2) {\n//         //   setAudioAnalysisResults(result.Data2.Data2); // Set audio analysis results\n//         // }\n//         setShowResults(true);\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = frameValidationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const handleRowClick = (index) => {\n//     if (expandedRow === index) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(index);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameValidationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th></th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {frameValidationResults.map((frame, index) => (\n//                     <React.Fragment key={index}>\n//                       <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n//                         <td className='frame-open-close'>{frame.file_name}\n//                           {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n//                         </td>\n//                       </tr>\n//                       {expandedRow === index && (\n//                         <tr className=\"details-row\">\n//                           <td colSpan=\"2\">\n//                             <table className=\"details-table\">\n//                               <thead>\n//                                 <tr>\n//                                   <th>Rule Name</th>\n//                                   <th>Rule Definition</th>\n//                                   <th>Validation Result</th>\n//                                   <th>Validation Comment</th>\n//                                 </tr>\n//                               </thead>\n//                               <tbody>\n//                                 {frame.results.map((rule, ruleIndex) => (\n//                                   <tr key={ruleIndex} className={getRowColor(rule)}>\n//                                     <td>{rule.rule_name}</td>\n//                                     <td>{rule.rule_defination}</td>\n//                                     <td>{rule.Validation_result}</td>\n//                                     <td>{rule.Validation_comment}</td>\n//                                   </tr>\n//                                 ))}\n//                               </tbody>\n//                             </table>\n//                           </td>\n//                         </tr>\n//                       )}\n//                     </React.Fragment>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>New Analysis Results</h4>\n//               <table className=\"audio_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Rule Name</th>\n//                     <th>Rule</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule_defination}</td>\n//                       <td>{result.Validation_result}</td>\n//                       <td>{result.Validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [frameValidationResults, setFrameValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const [audioAnalysisResults, setAudioAnalysisResults] = useState([]); // New analysis results state\n//   const fileInputRef = useRef(null);\n\n//   // console.log(\"AUDIO ANALYSIS result is:   \", audioAnalysisResults);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     // Log the formData contents\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0] + ': ' + pair[1]);\n//     }\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         if (selectedOperations.length==1 && selectedOperations[0]==='frame_analysis') {\n//           setFrameValidationResults(result.Data);\n//           setShowResults(true);\n//         }\n//         // Assuming Data1 is for frame validation and Data2 is for audio analysis\n//         // if (result.Data && result.Data[1] && result.Data[1].Data2) {\n//         //   setAudioAnalysisResults(result.Data[1].Data2); // Set audio analysis results\n//         //   setShowResults(true);\n//         // }\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.Validation_result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = frameValidationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const handleRowClick = (index) => {\n//     if (expandedRow === index) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(index);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameValidationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th></th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {frameValidationResults.map((frame, index) => (\n//                     <React.Fragment key={index}>\n//                       <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n//                         <td className='frame-open-close'>{frame.file_name}\n//                           {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n//                         </td>\n//                       </tr>\n//                       {expandedRow === index && (\n//                         <tr className=\"details-row\">\n//                           <td colSpan=\"2\">\n//                             <table className=\"details-table\">\n//                               <thead>\n//                                 <tr>\n//                                   <th>Rule Name</th>\n//                                   <th>Rule Definition</th>\n//                                   <th>Validation Result</th>\n//                                   <th>Validation Comment</th>\n//                                 </tr>\n//                               </thead>\n//                               <tbody>\n//                                 {frame.results.map((rule, ruleIndex) => (\n//                                   <tr key={ruleIndex} className={getRowColor(rule)}>\n//                                     <td>{rule.rule_name}</td>\n//                                     <td>{rule.rule_defination}</td>\n//                                     <td>{rule.Validation_result}</td>\n//                                     <td>{rule.Validation_comment}</td>\n//                                   </tr>\n//                                 ))}\n//                               </tbody>\n//                             </table>\n//                           </td>\n//                         </tr>\n//                       )}\n//                     </React.Fragment>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>New Analysis Results</h4>\n//               <table className=\"audio_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Rule Name</th>\n//                     <th>Rule Definition</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule_defination}</td>\n//                       <td>{result.Validation_result}</td>\n//                       <td>{result.Validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [frameValidationResults, setFrameValidationResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const [audioAnalysisResults, setAudioAnalysisResults] = useState([]); // New analysis results state\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         if (selectedOperations.length === 1 && selectedOperations[0].value === 'frame_analysis') {\n//           setFrameValidationResults(result.Data);\n//           setShowResults(true);\n//         }\n//         if (selectedOperations.length === 1 && selectedOperations[0].value === 'audio_analysis') {\n//           if (result.Data && result.Data[1] && result.Data[1].Data2) {\n//             setAudioAnalysisResults(result.Data[1].Data2); // Set audio analysis results\n//             setShowResults(true);\n//           }\n//         }\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.Validation_result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = frameValidationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const handleRowClick = (index) => {\n//     if (expandedRow === index) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(index);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameValidationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th></th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {frameValidationResults.map((frame, index) => (\n//                     <React.Fragment key={index}>\n//                       <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n//                         <td className='frame-open-close'>{frame.file_name}\n//                           {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n//                         </td>\n//                       </tr>\n//                       {expandedRow === index && (\n//                         <tr className=\"details-row\">\n//                           <td colSpan=\"2\">\n//                             <table className=\"details-table\">\n//                               <thead>\n//                                 <tr>\n//                                   <th>Rule Name</th>\n//                                   <th>Rule Definition</th>\n//                                   <th>Validation Result</th>\n//                                   <th>Validation Comment</th>\n//                                 </tr>\n//                               </thead>\n//                               <tbody>\n//                                 {frame.results.map((rule, ruleIndex) => (\n//                                   <tr key={ruleIndex} className={getRowColor(rule)}>\n//                                     <td>{rule.rule_name}</td>\n//                                     <td>{rule.rule_defination}</td>\n//                                     <td>{rule.Validation_result}</td>\n//                                     <td>{rule.Validation_comment}</td>\n//                                   </tr>\n//                                 ))}\n//                               </tbody>\n//                             </table>\n//                           </td>\n//                         </tr>\n//                       )}\n//                     </React.Fragment>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"audio_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Rule Name</th>\n//                     <th>Rule Definition</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule_defination}</td>\n//                       <td>{result.Validation_result}</td>\n//                       <td>{result.Validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [frameValidationResults, setFrameValidationResults] = useState([]);\n//   const [audioAnalysisResults, setAudioAnalysisResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         if (selectedOperations.length === 2 && selectedOperations[0].value === 'frame_analysis' && selectedOperations[1].value === 'audio_analysis') {\n//           setFrameValidationResults(result.frame.data);\n//           setAudioAnalysisResults(result.audio.data[1].Data2);\n//           setShowResults(true);\n//         }\n//         else if (selectedOperations.length === 1 && selectedOperations[0].value === 'frame_analysis') {\n//           setFrameValidationResults(result.Data);\n//           setAudioAnalysisResults([]);\n//           setShowResults(true);\n//         } \n//         else if (selectedOperations.length === 1 && selectedOperations[0].value === 'audio_analysis') {\n//           if (result.Data && result.Data[1] && result.Data[1].Data2) {\n//             setAudioAnalysisResults(result.Data[1].Data2); // Set audio analysis results\n//             setFrameValidationResults([]);\n//             setShowResults(true);\n//           }\n//         }\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.Validation_result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = frameValidationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const handleRowClick = (index) => {\n//     if (expandedRow === index) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(index);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameValidationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th></th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {frameValidationResults.map((frame, index) => (\n//                     <React.Fragment key={index}>\n//                       <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n//                         <td className='frame-open-close'>{frame.file_name}\n//                           {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n//                         </td>\n//                       </tr>\n//                       {expandedRow === index && (\n//                         <tr className=\"details-row\">\n//                           <td colSpan=\"2\">\n//                             <table className=\"details-table\">\n//                               <thead>\n//                                 <tr>\n//                                   <th>Rule Name</th>\n//                                   <th>Rule Definition</th>\n//                                   <th>Validation Result</th>\n//                                   <th>Validation Comment</th>\n//                                 </tr>\n//                               </thead>\n//                               <tbody>\n//                                 {frame.results.map((rule, ruleIndex) => (\n//                                   <tr key={ruleIndex} className={getRowColor(rule)}>\n//                                     <td>{rule.rule_name}</td>\n//                                     <td>{rule.rule_defination}</td>\n//                                     <td>{rule.Validation_result}</td>\n//                                     <td>{rule.Validation_comment}</td>\n//                                   </tr>\n//                                 ))}\n//                               </tbody>\n//                             </table>\n//                           </td>\n//                         </tr>\n//                       )}\n//                     </React.Fragment>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"audio_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Rule Name</th>\n//                     <th>Rule Definition</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule_defination}</td>\n//                       <td>{result.Validation_result}</td>\n//                       <td>{result.Validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import Select from 'react-select';\n// import './ValidateVideoContent.css';\n// import { saveAs } from 'file-saver';\n// import { Parser } from 'json2csv';\n// import { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\n// function ValidateVideoContent() {\n//   const [selectedFilePath, setSelectedFilePath] = useState('');\n//   const [programType, setProgramType] = useState('');\n//   const [frameValidationResults, setFrameValidationResults] = useState([]);\n//   const [audioAnalysisResults, setAudioAnalysisResults] = useState([]);\n//   const [showResults, setShowResults] = useState(false);\n//   const [showFailedResults, setShowFailedResults] = useState(false);\n//   const [failedMessage, setFailedMessage] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [programs, setPrograms] = useState([]);\n//   const [selectedOperations, setSelectedOperations] = useState([]);\n//   const [expandedRow, setExpandedRow] = useState(null);\n//   const fileInputRef = useRef(null);\n\n//   const options = [\n//     { value: 'frame_analysis', label: 'Frame Analysis' },\n//     { value: 'audio_analysis', label: 'Audio Analysis' },\n//   ];\n\n//   useEffect(() => {\n//     fetchPrograms();\n//     setSelectedOperations(options); // Set default selected options\n//   }, []);\n\n//   const fetchPrograms = async () => {\n//     try {\n//       const response = await fetch(`/list_programs`);\n//       const data = await response.json();\n//       if (data.body.status === 'success') {\n//         setPrograms(data.body.data);\n//       } else {\n//         console.error('Failed to fetch programs:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching programs:', error);\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       setSelectedFilePath(file.name);\n//     }\n//   };\n\n//   const handleBrowseClick = () => {\n//     fileInputRef.current.click();\n//   };\n\n//   const handleProgramTypeChange = (event) => {\n//     setProgramType(event.target.value);\n//   };\n\n//   const handleRuleChange = (selectedOptions) => {\n//     setSelectedOperations(selectedOptions);\n//   };\n\n//   const handleAnalyze = async (event) => {\n//     event.preventDefault();\n//     const file = fileInputRef.current.files[0];\n//     if (!file || !programType) {\n//       alert('Please select a file and program type.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     formData.append('program_type', programType);\n//     formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n//     setLoading(true);\n//     setShowResults(false);\n//     setShowFailedResults(false);\n\n//     try {\n//       const response = await fetch(`/video_validation`, {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const result = await response.json();\n//       console.log(\"Validation result: \", result); // Log result for debugging\n//       if (result.status === 'SUCCESS') {\n//         if (selectedOperations.length === 2 &&\n//             selectedOperations.some(op => op.value === 'frame_analysis') &&\n//             selectedOperations.some(op => op.value === 'audio_analysis')) {\n//           setFrameValidationResults(result.frame.data);\n//           setAudioAnalysisResults(result.audio.data[1].Data2);\n//           setShowResults(true);\n//         } else if (selectedOperations.length === 1 && selectedOperations[0].value === 'frame_analysis') {\n//           setFrameValidationResults(result.Data);\n//           setAudioAnalysisResults([]);\n//           setShowResults(true);\n//         } else if (selectedOperations.length === 1 && selectedOperations[0].value === 'audio_analysis') {\n//           if (result.Data && result.Data[1] && result.Data[1].Data2) {\n//             setAudioAnalysisResults(result.Data[1].Data2); // Set audio analysis results\n//             setFrameValidationResults([]);\n//             setShowResults(true);\n//           }\n//         }\n//       } else {\n//         setFailedMessage(result.data);\n//         setShowFailedResults(true);\n//       }\n//     } catch (error) {\n//       setFailedMessage(error.message);\n//       setShowFailedResults(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getRowColor = (result) => {\n//     const value = result.Validation_result;\n//     if (typeof value === 'string') {\n//       return value.toLowerCase().includes('no') ? 'failed' : 'success';\n//     }\n//     return 'failed';\n//   };\n\n//   const downloadExcel = () => {\n//     const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n//     const data = frameValidationResults.map((result, index) => ({\n//       \"Sr. No.\": index + 1,\n//       \"Frames\": result.frame_name,\n//       \"Validation Result\": result.validation_result,\n//     }));\n//     const json2csvParser = new Parser({ fields });\n//     const csv = json2csvParser.parse(data);\n//     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n//     saveAs(blob, \"Video_Validation_Results.csv\");\n//   };\n\n//   const handleRowClick = (index) => {\n//     if (expandedRow === index) {\n//       setExpandedRow(null);\n//     } else {\n//       setExpandedRow(index);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"validate-video-content\">\n//         <div className='validate-video-content-header'>Validate Video Content</div>\n//         <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n//           <div className=\"validate-video-content-form-group floating-label-input\">\n//             <select value={programType} onChange={handleProgramTypeChange} required>\n//               <option value=\"\" disabled>Select Program Type</option>\n//               {programs.map((program) => (\n//                 <option key={program.programID} value={program.programName}>{program.programName}</option>\n//               ))}\n//             </select>\n//             <label>Program Type</label>\n//           </div>\n\n//           <div className=\"select-container validate-video-content-form-group\">\n//             <Select\n//               isMulti\n//               closeMenuOnSelect={false}\n//               name=\"operations\"\n//               options={options}\n//               value={selectedOperations} // Set default selected options\n//               className=\"basic-multi-select\"\n//               classNamePrefix=\"select\"\n//               onChange={handleRuleChange}\n//               placeholder=\"Search\"\n//               required\n//             />\n//             <label>Operation Type*</label>\n//           </div>\n\n//           <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n//             <div className=\"input-group\">\n//               <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n//               <label>Browse</label>\n//               <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n//               <input\n//                 type=\"file\"\n//                 id=\"fileInput\"\n//                 style={{ display: 'none' }}\n//                 ref={fileInputRef}\n//                 onChange={handleFileChange}\n//               />\n//             </div>\n//           </div>\n//         </form>\n//         <div className=\"uploaded-and-analyze\">\n//           <div className='analyze-button-repositioning'>\n//             <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n//           </div>\n//         </div>\n//       </div>\n//       {loading && (\n//         <div className=\"loader\">Loading...</div>\n//       )}\n//       {showResults && (\n//         <div className=\"validation-results\">\n//           <h3>Validation Results</h3>\n//           <button className=\"download-button\" onClick={downloadExcel}>\n//             <FaDownload className=\"download-icon\" /> Download Excel\n//           </button>\n\n//           {frameValidationResults.length > 0 && (\n//             <div>\n//               <h4>Frame Analysis Results</h4>\n//               <table className=\"frame_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Image</th>\n//                     <th></th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {frameValidationResults.map((frame, index) => (\n//                     <React.Fragment key={index}>\n//                       <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n//                         <td className='frame-open-close'>{frame.file_name}\n//                           {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n//                         </td>\n//                       </tr>\n//                       {expandedRow === index && (\n//                         <tr className=\"details-row\">\n//                           <td colSpan=\"2\">\n//                             <table className=\"details-table\">\n//                               <thead>\n//                                 <tr>\n//                                   <th>Rule Name</th>\n//                                   <th>Rule Definition</th>\n//                                   <th>Validation Result</th>\n//                                   <th>Validation Comment</th>\n//                                 </tr>\n//                               </thead>\n//                               <tbody>\n//                                 {frame.results.map((rule, ruleIndex) => (\n//                                   <tr key={ruleIndex} className={getRowColor(rule)}>\n//                                     <td>{rule.rule_name}</td>\n//                                     <td>{rule.rule_defination}</td>\n//                                     <td>{rule.Validation_result}</td>\n//                                     <td>{rule.Validation_comment}</td>\n//                                   </tr>\n//                                 ))}\n//                               </tbody>\n//                             </table>\n//                           </td>\n//                         </tr>\n//                       )}\n//                     </React.Fragment>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n\n//           {audioAnalysisResults.length > 0 && (\n//             <div>\n//               <h4>Audio Analysis Results</h4>\n//               <table className=\"audio_analysis_results-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Rule Name</th>\n//                     <th>Rule Definition</th>\n//                     <th>Validation Result</th>\n//                     <th>Validation Comment</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   {audioAnalysisResults.map((result, index) => (\n//                     <tr key={index} className={getRowColor(result)}>\n//                       <td>{result.rule_name}</td>\n//                       <td>{result.rule_defination}</td>\n//                       <td>{result.Validation_result}</td>\n//                       <td>{result.Validation_comment}</td>\n//                     </tr>\n//                   ))}\n//                 </tbody>\n//               </table>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {showFailedResults && (\n//         <div className=\"validation-results\">\n//           <h3>Failed Validation Results</h3>\n//           <div className=\"failed-message\">\n//             {failedMessage}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ValidateVideoContent;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Select from 'react-select';\nimport './ValidateVideoContent.css';\nimport { saveAs } from 'file-saver';\nimport { Parser } from 'json2csv';\nimport { FaDownload, FaChevronDown, FaChevronUp } from 'react-icons/fa';\n\nfunction ValidateVideoContent() {\n  const [selectedFilePath, setSelectedFilePath] = useState('');\n  const [programType, setProgramType] = useState('');\n  const [frameValidationResults, setFrameValidationResults] = useState([]);\n  const [audioAnalysisResults, setAudioAnalysisResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [showFailedResults, setShowFailedResults] = useState(false);\n  const [failedMessage, setFailedMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [programs, setPrograms] = useState([]);\n  const [selectedOperations, setSelectedOperations] = useState([]);\n  const [expandedRow, setExpandedRow] = useState(null);\n  const fileInputRef = useRef(null);\n\n  const options = [\n    { value: 'frame_analysis', label: 'Frame Analysis' },\n    { value: 'audio_analysis', label: 'Audio Analysis' },\n  ];\n\n  useEffect(() => {\n    fetchPrograms();\n    setSelectedOperations(options); // Set default selected options\n  }, []);\n\n  const fetchPrograms = async () => {\n    try {\n      const response = await fetch(`/list_programs`);\n      const data = await response.json();\n      if (data.body.status === 'success') {\n        setPrograms(data.body.data);\n      } else {\n        console.error('Failed to fetch programs:', data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching programs:', error);\n    }\n  };\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedFilePath(file.name);\n    }\n  };\n\n  const handleBrowseClick = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleProgramTypeChange = (event) => {\n    setProgramType(event.target.value);\n  };\n\n  const handleRuleChange = (selectedOptions) => {\n    setSelectedOperations(selectedOptions);\n  };\n\n  const handleAnalyze = async (event) => {\n    event.preventDefault();\n    const file = fileInputRef.current.files[0];\n    if (!file || !programType) {\n      alert('Please select a file and program type.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('program_type', programType);\n    formData.append('operation', JSON.stringify(selectedOperations.map(operation => operation.value)));\n\n    setLoading(true);\n    setShowResults(false);\n    setShowFailedResults(false);\n\n    try {\n      const response = await fetch(`/video_validation`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      const result = await response.json();\n      // console.log(\"Validation result: \", result); // Log result for debugging\n      if (result.frame.status === 'SUCCESS' && result.audio.status === 'SUCCESS') {\n        if (selectedOperations.length === 2 &&\n            selectedOperations.some(op => op.value === 'frame_analysis') &&\n            selectedOperations.some(op => op.value === 'audio_analysis')) {\n          setFrameValidationResults(result.frame.data);\n          console.log(\"Validation frame result: \", result.frame.data);\n          setAudioAnalysisResults(result.audio.data[1].Data2);\n          console.log(\"Validation audio result: \", result.audio.data[1].Data2);\n          setShowResults(true);\n        }\n        else if (selectedOperations.length === 1 && selectedOperations[0].value === 'frame_analysis') {\n          setFrameValidationResults(result.frame.data);\n          setAudioAnalysisResults([]);\n          setShowResults(true);\n        } \n        else if (selectedOperations.length === 1 && selectedOperations[0].value === 'audio_analysis') {\n          if (result.audio && result.audio.data[1] && result.audio.data[1].Data2) {\n            setAudioAnalysisResults(result.audio.data[1].Data2); // Set audio analysis results\n            setFrameValidationResults([]);\n            setShowResults(true);\n          }\n        }\n      } else {\n        setFailedMessage(result.data);\n        setShowFailedResults(true);\n      }\n    } catch (error) {\n      setFailedMessage(error.message);\n      setShowFailedResults(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRowColor = (result) => {\n    const value = result.Validation_result;\n    if (typeof value === 'string') {\n      return value.toLowerCase().includes('no') ? 'failed' : 'success';\n    }\n    return 'failed';\n  };\n\n  const downloadExcel = () => {\n    const fields = [\"Sr. No.\", \"Frames\", \"Validation Result\"];\n    const data = frameValidationResults.map((result, index) => ({\n      \"Sr. No.\": index + 1,\n      \"Frames\": result.frame_name,\n      \"Validation Result\": result.validation_result,\n    }));\n    const json2csvParser = new Parser({ fields });\n    const csv = json2csvParser.parse(data);\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, \"Video_Validation_Results.csv\");\n  };\n\n  const handleRowClick = (index) => {\n    if (expandedRow === index) {\n      setExpandedRow(null);\n    } else {\n      setExpandedRow(index);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"validate-video-content\">\n        <div className='validate-video-content-header'>Validate Video Content</div>\n        <form className=\"validate-video-content-form\" onSubmit={handleAnalyze}>\n\n          <div className=\"validate-video-content-form-group floating-label-input\">\n            <select value={programType} onChange={handleProgramTypeChange} required>\n              <option value=\"\" disabled>Select Program Type</option>\n              {programs.map((program) => (\n                <option key={program.programID} value={program.programName}>{program.programName}</option>\n              ))}\n            </select>\n            <label>Program Type</label>\n          </div>\n\n          <div className=\"select-container validate-video-content-form-group\">\n            <Select\n              isMulti\n              closeMenuOnSelect={false}\n              name=\"operations\"\n              options={options}\n              value={selectedOperations} // Set default selected options\n              className=\"basic-multi-select\"\n              classNamePrefix=\"select\"\n              onChange={handleRuleChange}\n              placeholder=\"Search\"\n              required\n            />\n            <label>Operation Type*</label>\n          </div>\n\n          <div className=\"validate-video-content-form-group media-type-group floating-label-input\">\n            <div className=\"input-group\">\n              <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n              <label>Browse</label>\n              <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n              <input\n                type=\"file\"\n                id=\"fileInput\"\n                style={{ display: 'none' }}\n                ref={fileInputRef}\n                onChange={handleFileChange}\n              />\n            </div>\n          </div>\n        </form>\n        <div className=\"uploaded-and-analyze\">\n          <div className='analyze-button-repositioning'>\n            <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n          </div>\n        </div>\n      </div>\n      {loading && (\n        <div className=\"loader\">Loading...</div>\n      )}\n      {showResults && (\n        <div className=\"validation-results\">\n          <h3>Validation Results</h3>\n          <button className=\"download-button\" onClick={downloadExcel}>\n            <FaDownload className=\"download-icon\" /> Download Excel\n          </button>\n\n          {frameValidationResults.length > 0 && (\n            <div>\n              <h4>Frame Analysis Results</h4>\n              <table className=\"frame_analysis_results-table\">\n                <thead>\n                  <tr>\n                    <th>Image</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {frameValidationResults.map((frame, index) => (\n                    <React.Fragment key={index}>\n                      <tr onClick={() => handleRowClick(index)} className=\"frame-analysis-row\">\n                        <td className='frame-open-close'>{frame.file_name}\n                          {expandedRow === index ? <FaChevronUp /> : <FaChevronDown />}\n                        </td>\n                      </tr>\n                      {expandedRow === index && (\n                        <tr className=\"details-row\">\n                          <td colSpan=\"2\">\n                            <table className=\"details-table\">\n                              <thead>\n                                <tr>\n                                  <th>Rule Name</th>\n                                  <th>Rule Definition</th>\n                                  <th>Validation Result</th>\n                                  <th>Validation Comment</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {frame.results.map((rule, ruleIndex) => (\n                                  <tr key={ruleIndex} className={getRowColor(rule)}>\n                                    <td>{rule.rule_name}</td>\n                                    <td>{rule.rule_defination}</td>\n                                    <td>{rule.Validation_result}</td>\n                                    <td>{rule.Validation_comment}</td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </td>\n                        </tr>\n                      )}\n                    </React.Fragment>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n\n          {audioAnalysisResults.length > 0 && (\n            <div>\n              <h4>Audio Analysis Results</h4>\n              <table className=\"audio_analysis_results-table\">\n                <thead>\n                  <tr>\n                    <th>Rule Name</th>\n                    <th>Rule Definition</th>\n                    <th>Validation Result</th>\n                    <th>Validation Comment</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {audioAnalysisResults.map((result, index) => (\n                    <tr key={index} className={getRowColor(result)}>\n                      <td>{result.rule_name}</td>\n                      <td>{result.rule_defination}</td>\n                      <td>{result.Validation_result}</td>\n                      <td>{result.Validation_comment}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      )}\n      {showFailedResults && (\n        <div className=\"validation-results\">\n          <h3>Failed Validation Results</h3>\n          <div className=\"failed-message\">\n            {failedMessage}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ValidateVideoContent;\n"],"names":["selectedFilePath","setSelectedFilePath","useState","programType","setProgramType","frameValidationResults","setFrameValidationResults","audioAnalysisResults","setAudioAnalysisResults","showResults","setShowResults","showFailedResults","setShowFailedResults","failedMessage","setFailedMessage","loading","setLoading","programs","setPrograms","selectedOperations","setSelectedOperations","expandedRow","setExpandedRow","fileInputRef","useRef","options","value","label","useEffect","fetchPrograms","async","response","fetch","data","json","body","status","console","error","handleAnalyze","event","preventDefault","file","current","files","alert","formData","FormData","append","JSON","stringify","map","operation","method","result","frame","audio","length","some","op","log","Data2","message","getRowColor","Validation_result","toLowerCase","includes","_jsxs","children","className","_jsx","onSubmit","onChange","target","required","disabled","program","programName","programID","Select","isMulti","closeMenuOnSelect","name","classNamePrefix","selectedOptions","placeholder","type","readOnly","onClick","handleBrowseClick","click","id","style","display","ref","downloadExcel","index","frame_name","validation_result","csv","Parser","fields","parse","blob","Blob","saveAs","FaDownload","React","handleRowClick","file_name","FaChevronUp","FaChevronDown","colSpan","results","rule","ruleIndex","rule_name","rule_defination","Validation_comment"],"sourceRoot":""}