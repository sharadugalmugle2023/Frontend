{"version":3,"file":"static/js/851.cff5b77b.chunk.js","mappings":"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","sources":["components/Spinner.js","components/ValidateContent.js"],"sourcesContent":["import React from 'react';\nimport './Spinner.css';  // Import the CSS for the spinner\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\"></div>\n  );\n}\n\nexport default Spinner;\n","import React, { useState, useEffect, useRef } from 'react';\nimport './ValidateContent.css';\nimport { saveAs } from 'file-saver';\nimport { Parser } from 'json2csv';\nimport { FaDownload } from 'react-icons/fa';\nimport Spinner from './Spinner';  // Import the custom spinner\n\nfunction ValidateContent() {\n  const [programs, setPrograms] = useState([]);\n  const [selectedFilePath, setSelectedFilePath] = useState('');\n  const [mediaType, setMediaType] = useState('');\n  const [programType, setProgramType] = useState('');\n  const [validationResults, setValidationResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [showFailedResults, setShowFailedResults] = useState(false);\n  const [failedMessage, setFailedMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fileInputRef = useRef(null);\n\n  useEffect(() => {\n    fetchPrograms();\n  }, []);\n\n  const fetchPrograms = async () => {\n    try {\n      const response = await fetch(`/list_programs`);\n      const data = await response.json();\n\n      if (data.body.status === 'success') {\n        setPrograms(data.body.data);\n      } else {\n        console.error('Failed to fetch programs:', data.body.data);\n      }\n    } catch (error) {\n      console.error('Error fetching programs:', error);\n    }\n  };\n  // console.log(\"Programs in Validationss: \",programs)\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedFilePath(file.name);\n    }\n  };\n\n  const handleBrowseClick = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleMediaTypeChange = (event) => {\n    setMediaType(event.target.value);\n  };\n\n  const handleProgramTypeChange = (event) => {\n    setProgramType(event.target.value);\n  };\n\n  const handleAnalyze = async (event) => {\n    event.preventDefault();\n    const file = fileInputRef.current.files[0];\n    if (!file || !mediaType || !programType) {\n      alert('Please select a file, media type, and program type.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('program_type', programType);\n    formData.append('media_type', mediaType);\n\n    setLoading(true);\n    setShowResults(false);\n    setShowFailedResults(false);\n\n    try {\n      const response = await fetch(`/validation`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      const result = await response.json();\n      if (result.status === 'SUCCESS') {\n        console.log('Validation successful:', result.data);\n        setValidationResults(result.data);\n        setShowResults(true);\n      } else {\n        console.error('Validation failed:', result.data);\n        setFailedMessage(result.data);\n        setShowFailedResults(true);\n      }\n    } catch (error) {\n      console.error('Error during validation:', error);\n      setShowResults(false);\n      setFailedMessage(error.message);\n      setShowFailedResults(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRowColor = (result) => {\n    const value = result[2];\n    if (typeof value === 'string') {\n      const lowerValue = value.toLowerCase();\n      return lowerValue.includes('no') ? 'failed' : 'success';\n    }\n    return 'failed';\n  };\n\n  const downloadExcel = () => {\n    const fields = [\"Sr. No.\", \"Rule Name\", \"Rule\", \"Validation Result\", \"Validation Comment\"];\n    const data = validationResults.map((result, index) => ({\n      \"Sr. No.\": index + 1,\n      \"Rule Name\": result[0],\n      \"Rule\": result[1],\n      \"Validation Result\": result[2],\n      \"Validation Comment\": result[3],\n    }));\n    const json2csvParser = new Parser({ fields });\n    const csv = json2csvParser.parse(data);\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, \"Validation_Results.csv\");\n  };\n\n  return (\n    <div>\n      <div className=\"validate-content\">\n        <div className='validate-content-header'>Validate Content</div>\n        <form className=\"validate-content-form\" onSubmit={handleAnalyze}>\n\n          <div className=\"validate-content-form-group floating-label-input\">\n            <select value={programType} onChange={handleProgramTypeChange} required>\n              <option value=\"\" disabled>Select Product Type</option>\n              {programs.map((program) => (\n                <option key={program.programID} value={program.programName}>{program.programName}</option>\n              ))}\n            </select>\n            <label>Product Type</label>\n          </div>\n\n          <div className=\"validate-content-form-group floating-label-input\">\n            <select value={mediaType} onChange={handleMediaTypeChange} required>\n              <option value=\"\" disabled>Select Media Type</option>\n              <option value=\"pdf\">PDF/Image</option>\n              {/* <option value=\"Video\">Video</option> */}\n              <option value=\"GIF\">GIF</option>\n            </select>\n            <label>Media Type</label>\n          </div>\n\n          <div className=\"validate-content-form-group media-type-group floating-label-input\">\n            <div className=\"input-group\">\n              <input type=\"text\" placeholder=\" \" readOnly value={selectedFilePath} />\n              <label>Browse</label>\n              <button type=\"button\" className=\"browse-button\" onClick={handleBrowseClick}>Browse</button>\n              <input\n                type=\"file\"\n                id=\"fileInput\"\n                style={{ display: 'none' }}\n                ref={fileInputRef}\n                onChange={handleFileChange}\n              />\n            </div>\n          </div>\n\n        </form>\n        <div className=\"uploaded-and-analyze\">\n          <div className='analyze-button-repositioning'>\n            <button onClick={handleAnalyze} className=\"analyze-button\">Analyze</button>\n          </div>\n        </div>\n      </div>\n      {loading && (\n        <div className=\"loader\">\n          <Spinner />\n        </div>\n      )}\n      {showResults && mediaType === 'pdf' && (\n        <div className=\"validation-results\">\n          <h3>Validation Results</h3>\n          <button className=\"download-button\" onClick={downloadExcel}>\n            <FaDownload className=\"download-icon\" /> Download Excel\n          </button>\n          <table className=\"results-table\">\n            <thead>\n              <tr>\n                <th>Sr. No.</th>\n                <th>Rule Name</th>\n                <th>Rule</th>\n                <th>Validation Result</th>\n                <th>Validation Comment</th>\n              </tr>\n            </thead>\n            <tbody>\n              {validationResults.map((result, index) => (\n                <tr key={index} className={getRowColor(result)}>\n                  <td>{index + 1}</td>\n                  <td>{result[0]}</td>\n                  <td>{result[1]}</td>\n                  <td>{result[2]}</td>\n                  <td>{result[3]}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n      {showFailedResults && mediaType === 'pdf' && (\n        <div className=\"validation-results\">\n          <h3>Failed Validation Results</h3>\n          <div className=\"failed-message\">\n            {failedMessage}\n          </div>\n        </div>\n      )}\n      {showResults && mediaType === 'GIF' && (\n        <div className=\"validation-results\">\n          <h3>Validation Results</h3>\n          <button className=\"download-button\" onClick={downloadExcel}>\n            <FaDownload className=\"download-icon\" /> Download Excel\n          </button>\n          <table className=\"results-table\">\n            <thead>\n              <tr>\n                <th>Sr. No.</th>\n                <th>Rule Name</th>\n                <th>Rule</th>\n                <th>Validation Result</th>\n                <th>Validation Comment</th>\n              </tr>\n            </thead>\n            <tbody>\n              {validationResults.map((result, index) => (\n                <tr key={index} className={getRowColor(result)}>\n                  <td>{index + 1}</td>\n                  <td>{result[0]}</td>\n                  <td>{result[1]}</td>\n                  <td>{result[2]}</td>\n                  <td>{result[3]}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n      {showFailedResults && mediaType === 'GIF' && (\n        <div className=\"validation-results\">\n          <h3>Failed Validation Results</h3>\n          <div className=\"failed-message\">\n            {failedMessage}\n          </div>\n        </div>\n      )}\n      {showResults && mediaType === 'Video' && (\n        <div className=\"validation-results\">\n          <h3>Validation Results</h3>\n          <table className=\"results-table\">\n            <thead>\n              <tr>\n                <th>Sr. No.</th>\n                <th>Title</th>\n                <th>Validation Result</th>\n              </tr>\n            </thead>\n            <tbody>\n              {validationResults.map((result, index) => (\n                <tr key={index} className={getRowColor(result)}>\n                  <td>{index + 1}</td>\n                  <td>{Object.keys(result)[0]}</td>\n                  <td>{Object.values(result)[0]} sec</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ValidateContent;\n"],"names":["Spinner","_jsx","className","programs","setPrograms","useState","selectedFilePath","setSelectedFilePath","mediaType","setMediaType","programType","setProgramType","validationResults","setValidationResults","showResults","setShowResults","showFailedResults","setShowFailedResults","failedMessage","setFailedMessage","loading","setLoading","fileInputRef","useRef","useEffect","fetchPrograms","async","response","fetch","data","json","body","status","console","error","handleAnalyze","event","preventDefault","file","current","files","alert","formData","FormData","append","method","result","log","message","getRowColor","value","toLowerCase","includes","downloadExcel","map","index","csv","Parser","fields","parse","blob","Blob","type","saveAs","_jsxs","children","onSubmit","onChange","target","required","disabled","program","programName","programID","placeholder","readOnly","onClick","handleBrowseClick","click","id","style","display","ref","name","FaDownload","Object","keys","values"],"sourceRoot":""}