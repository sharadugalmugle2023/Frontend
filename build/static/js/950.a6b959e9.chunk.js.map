{"version":3,"file":"static/js/950.a6b959e9.chunk.js","mappings":"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","sources":["components/Spinner.js","components/AddNewUser.js","components/EditUser.js","components/DeleteUser.js","components/Users.js"],"sourcesContent":["import React from 'react';\nimport './Spinner.css';  // Import the CSS for the spinner\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner\"></div>\n  );\n}\n\nexport default Spinner;\n","// import React, { useState } from 'react';\n// import './AddNewUser.css';\n// import { FaEye, FaEyeSlash } from 'react-icons/fa';  // Import eye icons\n\n// function AddNewUser({ onClose, onAddUser }) {\n//   const [formData, setFormData] = useState({\n//     firstName: '',\n//     lastName: '',\n//     email: '',\n//     phoneNumber: '',\n//     password: '',\n//     confirmPassword: '',\n//     role: '',\n//     status: '',\n//   });\n\n//   const [errors, setErrors] = useState({\n//     passwordMatch: false,\n//     invalidPhoneNumber: false,\n//   });\n\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n\n//     // Validate phone number\n//     if (name === 'phoneNumber') {\n//       const isValidPhoneNumber = /^\\d{10}$/.test(value);\n//       setErrors({ ...errors, invalidPhoneNumber: !isValidPhoneNumber });\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (formData.password !== formData.confirmPassword) {\n//       setErrors({ ...errors, passwordMatch: true });\n//       return;\n//     } else {\n//       setErrors({ ...errors, passwordMatch: false });\n//     }\n\n//     if (errors.invalidPhoneNumber) {\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`/add_user`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           firstName: formData.firstName,\n//           lastName: formData.lastName,\n//           email: formData.email,\n//           phoneNumber: formData.phoneNumber,\n//           password: formData.password,\n//           role: formData.role,\n//           status: formData.status,\n//         }),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok && data.status === 'SUCCESS') {\n//         alert('User added successfully!');\n//         onAddUser([data.user_name, formData.firstName, formData.lastName, formData.email, formData.phoneNumber, formData.role, formData.status]);\n//         onClose(); // Close the modal after successful addition\n//       } else {\n//         alert('Failed to add user: ' + (data.message || 'Unknown error'));\n//       }\n//     } catch (error) {\n//       console.error('Error adding user:', error);\n//       alert('Error adding user');\n//     }\n//   };\n\n//   return (\n//     <div className=\"add-new-user-modal-overlay\">\n//       <div className=\"add-new-user-modal-content\">\n//         <div className='add-new-user-header'>\n//           <div>Add New User</div>\n//           <button className=\"add-new-user-close-button\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <form className='new-user-form' onSubmit={handleSubmit}>\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"firstName\"\n//                 value={formData.firstName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \" // Placeholder to trigger the floating label\n//               />\n//               <label>First Name*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"lastName\"\n//                 value={formData.lastName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Last Name*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 value={formData.email}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Email*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"tel\"\n//                 name=\"phoneNumber\"\n//                 value={formData.phoneNumber}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Phone Number*</label>\n//               {errors.invalidPhoneNumber && (\n//                 <div className=\"error-message\">Invalid phone number</div>\n//               )}\n//             </div>\n//           </div>\n\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"password-wrapper floating-label-input\">\n//               <input\n//                 type={showPassword ? 'text' : 'password'}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Password*</label>\n//               <span\n//                 className=\"user-password-toggle\"\n//                 onClick={() => setShowPassword(!showPassword)}\n//               >\n//                 {showPassword ? <FaEye /> : <FaEyeSlash />}\n//               </span>\n//             </div>\n//             <div className=\"password-wrapper floating-label-input\">\n//               <input\n//                 type={showConfirmPassword ? 'text' : 'password'}\n//                 name=\"confirmPassword\"\n//                 value={formData.confirmPassword}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Confirm Password*</label>\n//               <span\n//                 className=\"user-password-toggle\"\n//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n//               >\n//                 {showConfirmPassword ? <FaEye /> : <FaEyeSlash />}\n//               </span>\n//             </div>\n//           </div>\n\n//           {errors.passwordMatch && (\n//             <div className=\"add-new-user-form-row error-message\">Passwords do not match</div>\n//           )}\n\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"role\"\n//                 value={formData.role}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Role</option>\n//                 <option value=\"SuperAdmin\">SuperAdmin</option>\n//                 <option value=\"Admin\">Admin</option>\n//                 <option value=\"Write\">Write</option>\n//                 <option value=\"Read\">Read</option>\n//               </select>\n//               <label>Role*</label>\n//             </div>\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"status\"\n//                 value={formData.status}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Status</option>\n//                 <option value=\"Active\">Active</option>\n//                 <option value=\"InActive\">InActive</option>\n//               </select>\n//               <label>Active Status*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"form-actions\">\n//             <button type=\"submit\">Add User</button>\n//             <button type=\"button\" onClick={onClose}>Cancel</button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AddNewUser;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import './AddNewUser.css';\n// import { FaEye, FaEyeSlash } from 'react-icons/fa';  // Import eye icons\n\n// function AddNewUser({ onClose, onAddUser }) {\n//   const [formData, setFormData] = useState({\n//     firstName: '',\n//     lastName: '',\n//     email: '',\n//     phoneNumber: '',\n//     password: '',\n//     confirmPassword: '',\n//     role: '',\n//     status: '',\n//   });\n\n//   const [errors, setErrors] = useState({\n//     passwordMatch: false,\n//     invalidPhoneNumber: false,\n//   });\n\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n\n//     // Validate phone number\n//     if (name === 'phoneNumber') {\n//       const isValidPhoneNumber = /^\\d{10}$/.test(value);\n//       setErrors({ ...errors, invalidPhoneNumber: !isValidPhoneNumber });\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (formData.password !== formData.confirmPassword) {\n//       setErrors({ ...errors, passwordMatch: true });\n//       return;\n//     } else {\n//       setErrors({ ...errors, passwordMatch: false });\n//     }\n\n//     if (errors.invalidPhoneNumber) {\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(`/add_user`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           firstName: formData.firstName,\n//           lastName: formData.lastName,\n//           email: formData.email,\n//           phoneNumber: formData.phoneNumber,\n//           password: formData.password,\n//           role: formData.role,\n//           status: formData.status,\n//         }),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok && data.status === 'SUCCESS') {\n//         alert('User added successfully!');\n//         onAddUser({\n//           user_id: data.user_id,\n//           first_name: formData.firstName,\n//           last_name: formData.lastName,\n//           email: formData.email,\n//           phone_number: formData.phoneNumber,\n//           role: formData.role,\n//           status: formData.status\n//         });\n//         onClose(); // Close the modal after successful addition\n//       } else {\n//         alert('Failed to add user: ' + (data.message || 'Unknown error'));\n//       }\n//     } catch (error) {\n//       console.error('Error adding user:', error);\n//       alert('Error adding user');\n//     }\n//   };\n\n//   return (\n//     <div className=\"add-new-user-modal-overlay\">\n//       <div className=\"add-new-user-modal-content\">\n//         <div className='add-new-user-header'>\n//           <div>Add New User</div>\n//           <button className=\"add-new-user-close-button\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <form className='new-user-form' onSubmit={handleSubmit}>\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"firstName\"\n//                 value={formData.firstName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \" // Placeholder to trigger the floating label\n//               />\n//               <label>First Name*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"lastName\"\n//                 value={formData.lastName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Last Name*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 value={formData.email}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Email*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"tel\"\n//                 name=\"phoneNumber\"\n//                 value={formData.phoneNumber}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Phone Number*</label>\n//               {errors.invalidPhoneNumber && (\n//                 <div className=\"error-message\">Invalid phone number</div>\n//               )}\n//             </div>\n//           </div>\n\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"password-wrapper floating-label-input\">\n//               <input\n//                 type={showPassword ? 'text' : 'password'}\n//                 name=\"password\"\n//                 value={formData.password}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Password*</label>\n//               <span\n//                 className=\"user-password-toggle\"\n//                 onClick={() => setShowPassword(!showPassword)}\n//               >\n//                 {showPassword ? <FaEye /> : <FaEyeSlash />}\n//               </span>\n//             </div>\n//             <div className=\"password-wrapper floating-label-input\">\n//               <input\n//                 type={showConfirmPassword ? 'text' : 'password'}\n//                 name=\"confirmPassword\"\n//                 value={formData.confirmPassword}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Confirm Password*</label>\n//               <span\n//                 className=\"user-password-toggle\"\n//                 onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n//               >\n//                 {showConfirmPassword ? <FaEye /> : <FaEyeSlash />}\n//               </span>\n//             </div>\n//           </div>\n\n//           {errors.passwordMatch && (\n//             <div className=\"add-new-user-form-row error-message\">Passwords do not match</div>\n//           )}\n\n//           <div className=\"add-new-user-form-row two-columns\">\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"role\"\n//                 value={formData.role}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Role</option>\n//                 <option value=\"SuperAdmin\">SuperAdmin</option>\n//                 <option value=\"Admin\">Admin</option>\n//                 <option value=\"Write\">Write</option>\n//                 <option value=\"Read\">Read</option>\n//               </select>\n//               <label>Role*</label>\n//             </div>\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"status\"\n//                 value={formData.status}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Status</option>\n//                 <option value=\"Active\">Active</option>\n//                 <option value=\"InActive\">InActive</option>\n//               </select>\n//               <label>Active Status*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"form-actions\">\n//             <button type=\"submit\">Add User</button>\n//             <button type=\"button\" onClick={onClose}>Cancel</button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AddNewUser;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState } from 'react';\nimport './AddNewUser.css';\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\n\nfunction AddNewUser({ onClose, onAddUser }) {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: '',\n    password: '',\n    confirmPassword: '',\n    role: '',\n    status: '',\n  });\n\n  const [errors, setErrors] = useState({\n    passwordMatch: false,\n    invalidPhoneNumber: false,\n  });\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n\n    if (name === 'phoneNumber') {\n      const isValidPhoneNumber = /^\\d{10}$/.test(value);\n      setErrors({ ...errors, invalidPhoneNumber: !isValidPhoneNumber });\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (formData.password !== formData.confirmPassword) {\n      setErrors({ ...errors, passwordMatch: true });\n      return;\n    } else {\n      setErrors({ ...errors, passwordMatch: false });\n    }\n\n    if (errors.invalidPhoneNumber) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/add_user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          phoneNumber: formData.phoneNumber,\n          password: formData.password,\n          role: formData.role,\n          status: formData.status,\n        }),\n      });\n\n      const data = await response.json();\n      if (response.ok && data.status === 'SUCCESS') {\n        alert('User added successfully!');\n        onAddUser(); // Trigger re-fetching of user list\n        onClose(); // Close the modal after successful addition\n      } else {\n        alert('Failed to add user: ' + (data.message || 'Unknown error'));\n      }\n    } catch (error) {\n      console.error('Error adding user:', error);\n      alert('Error adding user');\n    }\n  };\n\n  return (\n    <div className=\"add-new-user-modal-overlay\">\n      <div className=\"add-new-user-modal-content\">\n        <div className='add-new-user-header'>\n          <div>Add New User</div>\n          <button className=\"add-new-user-close-button\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <form className='new-user-form' onSubmit={handleSubmit}>\n          <div className=\"add-new-user-form-row two-columns\">\n            <div className=\"floating-label-input\">\n              <input\n                type=\"text\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange}\n                required\n                placeholder=\" \" // Placeholder to trigger the floating label\n              />\n              <label>First Name*</label>\n            </div>\n            <div className=\"floating-label-input\">\n              <input\n                type=\"text\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n              />\n              <label>Last Name*</label>\n            </div>\n          </div>\n\n          <div className=\"add-new-user-form-row two-columns\">\n            <div className=\"floating-label-input\">\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n              />\n              <label>Email*</label>\n            </div>\n            <div className=\"floating-label-input\">\n              <input\n                type=\"tel\"\n                name=\"phoneNumber\"\n                value={formData.phoneNumber}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n              />\n              <label>Phone Number*</label>\n              {errors.invalidPhoneNumber && (\n                <div className=\"error-message\">Invalid phone number</div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"add-new-user-form-row two-columns\">\n            <div className=\"password-wrapper floating-label-input\">\n              <input\n                type={showPassword ? 'text' : 'password'}\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n              />\n              <label>Password*</label>\n              <span\n                className=\"user-password-toggle\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? <FaEye /> : <FaEyeSlash />}\n              </span>\n            </div>\n            <div className=\"password-wrapper floating-label-input\">\n              <input\n                type={showConfirmPassword ? 'text' : 'password'}\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n              />\n              <label>Confirm Password*</label>\n              <span\n                className=\"user-password-toggle\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              >\n                {showConfirmPassword ? <FaEye /> : <FaEyeSlash />}\n              </span>\n            </div>\n          </div>\n\n          {errors.passwordMatch && (\n            <div className=\"add-new-user-form-row error-message\">Passwords do not match</div>\n          )}\n\n          <div className=\"add-new-user-form-row two-columns\">\n            <div className=\"select-container floating-label-input\">\n              <select\n                name=\"role\"\n                value={formData.role}\n                onChange={handleChange}\n                required\n              >\n                <option value=\"\" disabled>Select Role</option>\n                <option value=\"SuperAdmin\">SuperAdmin</option>\n                <option value=\"Admin\">Admin</option>\n                <option value=\"Write\">Write</option>\n                <option value=\"Read\">Read</option>\n              </select>\n              <label>Role*</label>\n            </div>\n            <div className=\"select-container floating-label-input\">\n              <select\n                name=\"status\"\n                value={formData.status}\n                onChange={handleChange}\n                required\n              >\n                <option value=\"\" disabled>Select Status</option>\n                <option value=\"Active\">Active</option>\n                <option value=\"InActive\">InActive</option>\n              </select>\n              <label>Active Status*</label>\n            </div>\n          </div>\n\n          <div className=\"form-actions\">\n            <button type=\"submit\">Add User</button>\n            <button type=\"button\" onClick={onClose}>Cancel</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default AddNewUser;\n","// import React, { useState, useEffect } from 'react';\n// import './EditUser.css';\n// import { FaEye, FaEyeSlash } from 'react-icons/fa'; // Import eye icons\n\n// function EditUser({ onClose, user, onEditUser }) {\n//   const [formData, setFormData] = useState({\n//     firstName: '',\n//     lastName: '',\n//     email: '',\n//     phoneNumber: '',\n//     role: '',\n//     status: '',\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       setFormData({\n//         user_id: user.user_id,\n//         firstName: user.firstName,\n//         lastName: user.lastName,\n//         email: user.email,\n//         phoneNumber: user.phoneNumber,\n//         role: user.role,\n//         status: user.status,\n//       });\n//     }\n//   }, [user]);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleEdit = async () => {\n//     if (formData.firstName && formData.lastName && formData.email && formData.phoneNumber) {\n//       try {\n//         const response = await fetch(`/edit_user`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({\n//             user_id: formData.user_id,\n//             firstName: formData.firstName,\n//             lastName: formData.lastName,\n//             email: formData.email,\n//             phoneNumber: formData.phoneNumber,\n//             role: formData.role,\n//             status: formData.status,\n//           }),\n//         });\n//         const data = await response.json();\n//         if (data.status === 'SUCCESS') {\n//           alert('User edited successfully!');\n//           onEditUser({\n//             user_id: formData.user_id,\n//             firstName: formData.firstName,\n//             lastName: formData.lastName,\n//             email: formData.email,\n//             phoneNumber: formData.phoneNumber,\n//             role: formData.role,\n//             status: formData.status,\n//           });\n//           onClose();\n//         } else {\n//           alert('Failed to edit user: ' + data.data);\n//         }\n//       } catch (error) {\n//         console.error('Error editing user:', error);\n//         alert('Error editing user');\n//       }\n//     } else {\n//       alert('Please enter all required fields');\n//     }\n//   };\n\n//   return (\n//     <div className=\"edit-user-overlay\">\n//       <div className=\"edit-user-modal-content\">\n//         <div className='edit-user-header'>\n//           <div>Edit User</div>\n//           <button className=\"edit-user-close-button\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <form className='edit-user-form' onSubmit={handleEdit}>\n//           <div className=\"edit-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"firstName\"\n//                 value={formData.firstName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \" // Placeholder to trigger the floating label\n//               />\n//               <label>First Name*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"lastName\"\n//                 value={formData.lastName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Last Name*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"edit-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 value={formData.email}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//                 disabled    //Made little blour\n//               />\n//               <label>Email*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"tel\"\n//                 name=\"phoneNumber\"\n//                 value={formData.phoneNumber}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Phone Number*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"edit-user-form-row two-columns\">\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"role\"\n//                 value={formData.role}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select User Role</option>\n//                 <option value=\"SuperAdmin\">SuperAdmin</option>\n//                 <option value=\"Admin\">Admin</option>\n//                 <option value=\"Write\">Write</option>\n//                 <option value=\"Read\">Read</option>\n//               </select>\n//               <label>Role*</label>\n//             </div>\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"status\"\n//                 value={formData.status}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Status</option>\n//                 <option value=\"Active\">Active</option>\n//                 <option value=\"InActive\">InActive</option>\n//               </select>\n//               <label>Active Status*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"form-actions\">\n//             <button type=\"submit\">Save</button>\n//             <button type=\"button\" onClick={onClose}>Cancel</button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default EditUser;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import './EditUser.css';\n// import { FaEye, FaEyeSlash } from 'react-icons/fa'; // Import eye icons\n\n// function EditUser({ onClose, user, onEditUser }) {\n//   const [formData, setFormData] = useState({\n//     firstName: '',\n//     lastName: '',\n//     email: '',\n//     phoneNumber: '',\n//     role: '',\n//     status: '',\n//   });\n\n//   useEffect(() => {\n//     if (user) {\n//       setFormData({\n//         user_id: user.user_id,\n//         firstName: user.firstName,\n//         lastName: user.lastName,\n//         email: user.email,\n//         phoneNumber: user.phoneNumber,\n//         role: user.role,\n//         status: user.status,\n//       });\n//     }\n//   }, [user]);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleEdit = async (e) => {\n//     e.preventDefault();\n//     if (formData.firstName && formData.lastName && formData.email && formData.phoneNumber) {\n//       try {\n//         const response = await fetch(`/edit_user`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({\n//             user_id: formData.user_id,\n//             firstName: formData.firstName,\n//             lastName: formData.lastName,\n//             email: formData.email,\n//             phoneNumber: formData.phoneNumber,\n//             role: formData.role,\n//             status: formData.status,\n//           }),\n//         });\n//         const data = await response.json();\n//         if (data.status === 'SUCCESS') {\n//           alert('User edited successfully!');\n//           onEditUser({\n//             user_id: formData.user_id,\n//             firstName: formData.firstName,\n//             lastName: formData.lastName,\n//             email: formData.email,\n//             phoneNumber: formData.phoneNumber,\n//             role: formData.role,\n//             status: formData.status,\n//           });\n//           onClose();\n//         } else {\n//           alert('Failed to edit user: ' + data.data);\n//         }\n//       } catch (error) {\n//         console.error('Error editing user:', error);\n//         alert('Error editing user');\n//       }\n//     } else {\n//       alert('Please enter all required fields');\n//     }\n//   };\n\n\n  \n\n//   return (\n//     <div className=\"edit-user-overlay\">\n//       <div className=\"edit-user-modal-content\">\n//         <div className='edit-user-header'>\n//           <div>Edit User</div>\n//           <button className=\"edit-user-close-button\" onClick={onClose}>×</button>\n//         </div>\n//         <hr />\n//         <form className='edit-user-form' onSubmit={handleEdit}>\n//           <div className=\"edit-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"firstName\"\n//                 value={formData.firstName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \" // Placeholder to trigger the floating label\n//               />\n//               <label>First Name*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"text\"\n//                 name=\"lastName\"\n//                 value={formData.lastName}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Last Name*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"edit-user-form-row two-columns\">\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"email\"\n//                 name=\"email\"\n//                 value={formData.email}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//                 disabled    // Make the email input read-only\n//                 className=\"blurred-input\" // Add blurred effect\n//               />\n//               <label>Email*</label>\n//             </div>\n//             <div className=\"floating-label-input\">\n//               <input\n//                 type=\"tel\"\n//                 name=\"phoneNumber\"\n//                 value={formData.phoneNumber}\n//                 onChange={handleChange}\n//                 required\n//                 placeholder=\" \"\n//               />\n//               <label>Phone Number*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"edit-user-form-row two-columns\">\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"role\"\n//                 value={formData.role}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select User Role</option>\n//                 <option value=\"SuperAdmin\">SuperAdmin</option>\n//                 <option value=\"Admin\">Admin</option>\n//                 <option value=\"Write\">Write</option>\n//                 <option value=\"Read\">Read</option>\n//               </select>\n//               <label>Role*</label>\n//             </div>\n//             <div className=\"select-container floating-label-input\">\n//               <select\n//                 name=\"status\"\n//                 value={formData.status}\n//                 onChange={handleChange}\n//                 required\n//               >\n//                 <option value=\"\" disabled>Select Status</option>\n//                 <option value=\"Active\">Active</option>\n//                 <option value=\"InActive\">InActive</option>\n//               </select>\n//               <label>Active Status*</label>\n//             </div>\n//           </div>\n\n//           <div className=\"form-actions\">\n//             <button type=\"submit\">Save</button>\n//             <button type=\"button\" onClick={onClose}>Cancel</button>\n//           </div>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default EditUser;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport './EditUser.css';\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'; // Import eye icons\n\nfunction EditUser({ onClose, user, onEditUser, fetching }) {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: '',\n    role: '',\n    status: '',\n  });\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        user_id: user.userID, // Ensure correct field name\n        firstName: user.firstName,\n        lastName: user.lastName,\n        email: user.email,\n        phoneNumber: user.phoneNumber,\n        role: user.role,\n        status: user.status,\n      });\n    }\n  }, [user]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleEdit = async (e) => {\n    e.preventDefault(); // Prevent default form submission\n    if (formData.firstName && formData.lastName && formData.email && formData.phoneNumber) {\n      try {\n        const response = await fetch(`/edit_user`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            user_id: formData.user_id,\n            firstName: formData.firstName,\n            lastName: formData.lastName,\n            email: formData.email,\n            phoneNumber: formData.phoneNumber,\n            role: formData.role,\n            status: formData.status,\n          }),\n        });\n        const data = await response.json();\n        if (data.status === 'SUCCESS') {\n          alert('User edited successfully!');\n          onEditUser({\n            user_id: formData.user_id,\n            firstName: formData.firstName,\n            lastName: formData.lastName,\n            email: formData.email,\n            phoneNumber: formData.phoneNumber,\n            role: formData.role,\n            status: formData.status,\n          });\n          fetching();\n          onClose();\n        } else {\n          alert('Failed to edit user: ' + data.data);\n        }\n      } catch (error) {\n        console.error('Error editing user:', error);\n        alert('Error editing user');\n      }\n    } else {\n      alert('Please enter all required fields');\n    }\n  };\n\n  return (\n    <div className=\"edit-user-overlay\">\n      <div className=\"edit-user-modal-content\">\n        <div className='edit-user-header'>\n          <div>Edit User</div>\n          <button className=\"edit-user-close-button\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <form className='edit-user-form' onSubmit={handleEdit}>\n          <div className=\"edit-user-form-row two-columns\">\n            <div className=\"floating-label-input\">\n              <input\n                type=\"text\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange}\n                required\n                placeholder=\" \" // Placeholder to trigger the floating label\n              />\n              <label>First Name*</label>\n            </div>\n            <div className=\"floating-label-input\">\n              <input\n                type=\"text\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n              />\n              <label>Last Name*</label>\n            </div>\n          </div>\n\n          <div className=\"edit-user-form-row two-columns\">\n            <div className=\"floating-label-input\">\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n                disabled    // Make the email input read-only\n                className=\"blurred-input\" // Add blurred effect\n              />\n              <label>Email*</label>\n            </div>\n            <div className=\"floating-label-input\">\n              <input\n                type=\"tel\"\n                name=\"phoneNumber\"\n                value={formData.phoneNumber}\n                onChange={handleChange}\n                required\n                placeholder=\" \"\n              />\n              <label>Phone Number*</label>\n            </div>\n          </div>\n\n          <div className=\"edit-user-form-row two-columns\">\n            <div className=\"select-container floating-label-input\">\n              <select\n                name=\"role\"\n                value={formData.role}\n                onChange={handleChange}\n                required\n              >\n                <option value=\"\" disabled>Select User Role</option>\n                <option value=\"SuperAdmin\">SuperAdmin</option>\n                <option value=\"Admin\">Admin</option>\n                <option value=\"Write\">Write</option>\n                <option value=\"Read\">Read</option>\n              </select>\n              <label>Role*</label>\n            </div>\n            <div className=\"select-container floating-label-input\">\n              <select\n                name=\"status\"\n                value={formData.status}\n                onChange={handleChange}\n                required\n              >\n                <option value=\"\" disabled>Select Status</option>\n                <option value=\"Active\">Active</option>\n                <option value=\"InActive\">InActive</option>\n              </select>\n              <label>Active Status*</label>\n            </div>\n          </div>\n\n          <div className=\"form-actions\">\n            <button type=\"submit\">Save</button>\n            <button type=\"button\" onClick={onClose}>Cancel</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default EditUser;\n","import React from 'react';\nimport './DeleteUser.css';\n\nfunction DeleteUser({ onClose, onDelete, user }) {\n\n\n  // console.log(\"USER ID is:\", user.userID)\n  const handleDelete = async () => {\n    try {\n      const response = await fetch(`/delete_user`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ user_id: user.userID })\n      });\n      const data = await response.json();\n      if (data.status === 'SUCCESS') {\n        alert('User deleted successfully!');\n        onDelete(user);\n        onClose();\n      } else {\n        alert('Failed to delete user: ' + data.data);\n      }\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      alert('Error deleting user');\n    }\n  };\n\n  return (\n    <div className=\"delete-user-overlay\">\n      <div className=\"delete-user\">\n        <div className=\"delete-user-header\">\n          <div>Delete User</div>\n          <button className=\"delete-user-close\" onClick={onClose}>×</button>\n        </div>\n        <hr />\n        <div className=\"delete-user-body\">\n          Are you sure you want to delete '<strong>{user.firstName} {user.lastName}</strong>'?\n        </div>\n        <div className=\"delete-user-footer\">\n          <button className=\"delete-user-confirm\" onClick={handleDelete}>Yes, Delete</button>\n          <button className=\"delete-user-cancel\" onClick={onClose}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DeleteUser;\n\n","\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Users.css';\n// import { FaEdit, FaTrash, FaSearch } from 'react-icons/fa';\n// import AddNewUser from './AddNewUser';\n// import EditUser from './EditUser';\n// import DeleteUser from './DeleteUser';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPER_ADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Users() {\n//   const [users, setUsers] = useState([]);\n//   const [allUsers, setAllUsers] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewUser, setShowAddNewUser] = useState(false);\n//   const [showEditUser, setShowEditUser] = useState(false);\n//   const [showDeleteUser, setShowDeleteUser] = useState(false);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchAllUsers();\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData.role);\n//     }\n//   }, []);\n\n//   const fetchAllUsers = async () => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_users`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setAllUsers(data.data);\n//         setUsers(data.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredUsers = async (term) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_user?search=${term}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setUsers(data.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const debouncedFetchFilteredUsers = useCallback(debounce(fetchFilteredUsers, 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredUsers(value);\n//   };\n\n//   const handleEditUser = (user) => {\n//     const userObject = {\n//       user_id: user[0],\n//       firstName: user[1],\n//       lastName: user[2],\n//       email: user[3],\n//       phoneNumber: user[4],\n//       role: user[5],\n//       status: user[6],\n//     };\n//     setCurrentUser(userObject);\n//     setShowEditUser(true);\n//   };\n\n//   const handleDeleteUser = (user) => {\n//     const userObject = {\n//       user_id: user[0],\n//       firstName: user[1],\n//       lastName: user[2],\n//       email: user[3],\n//       phoneNumber: user[4],\n//       role: user[5],\n//       status: user[6],\n//     };\n//     setCurrentUser(userObject);\n//     setShowDeleteUser(true);\n//   };\n\n//   const handleAddUser = (newUser) => {\n//     setUsers([...users, newUser]);\n//     setAllUsers([...allUsers, newUser]);\n//   };\n\n//   const handleUpdateUser = (updatedUser) => {\n//     const updatedUsers = users.map((user) =>\n//       user[0] === updatedUser.user_id ? [updatedUser.user_id, updatedUser.firstName, updatedUser.lastName, updatedUser.email, updatedUser.phoneNumber, updatedUser.role, updatedUser.status] : user\n//     );\n//     const updatedAllUsers = allUsers.map((user) =>\n//       user[0] === updatedUser.user_id ? [updatedUser.user_id, updatedUser.firstName, updatedUser.lastName, updatedUser.email, updatedUser.phoneNumber, updatedUser.role, updatedUser.status] : user\n//     );\n//     setUsers(updatedUsers);\n//     setAllUsers(updatedAllUsers);\n//   };\n\n//   const handleConfirmDelete = (deletedUser) => {\n//     const filteredUsers = users.filter(user => user[0] !== deletedUser.user_id);\n//     const filteredAllUsers = allUsers.filter(user => user[0] !== deletedUser.user_id);\n//     setUsers(filteredUsers);\n//     setAllUsers(filteredAllUsers);\n//   };\n\n//   return (\n//     <div className=\"users\">\n//       <div className=\"users-heading\">\n//         <div className='users-page-header'>Users</div>\n//         <div className=\"users-search-add\">\n//           <div className=\"users-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Username / Email / Role\"\n//               className=\"users-search-input\"\n//             />\n//             <FaSearch className=\"users-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//             <button className=\"users__add-new-button\" onClick={() => setShowAddNewUser(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"users__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Status</th>\n//             {userRole !== roles.READ && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner /> \n//           </div>\n//         ) : (\n//           <tbody>\n//             {users.length > 0 ? (\n//               users.map((user, index) => (\n//                 <tr key={index}>\n//                   <td>{user[1]} {user[2]}</td>\n//                   <td className=\"email-cell\">\n//                     <div className=\"email-tooltip\">\n//                       {user[3].length > 30 ? `${user[3].substring(0, 30)}...` : user[3]}\n//                       <span className=\"email-tooltip-text\">{user[3]}</span>\n//                     </div>\n//                     <input type=\"text\" value={user[3]} readOnly className=\"full-email-input\" />\n//                   </td>\n//                   <td>{user[5]}</td>\n//                   <td className={user[6] === 'Active' ? 'active-status' : ''}>{user[6]}</td>\n//                   {userRole !== roles.READ && (\n//                     <td>\n//                       {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//                         <button className=\"users__edit-button\" onClick={() => handleEditUser(user)}><FaEdit /> Edit</button>\n//                       )}\n//                       {userRole === roles.SUPER_ADMIN && (\n//                         <button className=\"users__delete-button\" onClick={() => handleDeleteUser(user)}><FaTrash /> Delete</button>\n//                       )}\n//                     </td>\n//                   )}\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={userRole !== roles.READ ? 5 : 4}>No users found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewUser && (\n//         <AddNewUser\n//           onClose={() => setShowAddNewUser(false)}\n//           onAddUser={handleAddUser}\n//         />\n//       )}\n//       {showEditUser && (\n//         <EditUser\n//           onClose={() => setShowEditUser(false)}\n//           user={currentUser}\n//           onEditUser={handleUpdateUser}\n//         />\n//       )}\n//       {showDeleteUser && (\n//         <DeleteUser\n//           onClose={() => setShowDeleteUser(false)}\n//           user={currentUser}\n//           onDelete={handleConfirmDelete}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Users;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// //FINEEEEEEEEEEEEEEEEEEE\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Users.css';\n// import { FaEdit, FaTrash, FaSearch } from 'react-icons/fa';\n// import AddNewUser from './AddNewUser';\n// import EditUser from './EditUser';\n// import DeleteUser from './DeleteUser';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPER_ADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Users() {\n//   const [users, setUsers] = useState([]);\n//   const [allUsers, setAllUsers] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewUser, setShowAddNewUser] = useState(false);\n//   const [showEditUser, setShowEditUser] = useState(false);\n//   const [showDeleteUser, setShowDeleteUser] = useState(false);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchAllUsers();\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchAllUsers = async () => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_users`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setAllUsers(data.data);\n//         setUsers(data.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredUsers = async (term) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_user?search=${term}`);\n//       const data = await response.json();\n//       if (data.status === 'SUCCESS') {\n//         setUsers(data.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n\n\n//   const debouncedFetchFilteredUsers = useCallback(debounce(fetchFilteredUsers, 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredUsers(value);\n//   };\n\n  // const handleEditUser = (user) => {\n  //   const userObject = {\n  //     user_id: user[0],\n  //     firstName: user[1],\n  //     lastName: user[2],\n  //     email: user[3],\n  //     phoneNumber: user[4],\n  //     role: user[5],\n  //     status: user[6],\n  //   };\n  //   setCurrentUser(userObject);\n  //   setShowEditUser(true);\n  // };\n\n//   const handleDeleteUser = (user) => {\n//     const userObject = {\n//       user_id: user[0],\n//       firstName: user[1],\n//       lastName: user[2],\n//       email: user[3],\n//       phoneNumber: user[4],\n//       role: user[5],\n//       status: user[6],\n//     };\n//     setCurrentUser(userObject);\n//     setShowDeleteUser(true);\n//   };\n\n//   const handleAddUser = (newUser) => {\n//     setUsers([...users, newUser]);\n//     setAllUsers([...allUsers, newUser]);\n//   };\n\n//   const handleUpdateUser = (updatedUser) => {\n//     const updatedUsers = users.map((user) =>\n//       user[0] === updatedUser.user_id ? [updatedUser.user_id, updatedUser.firstName, updatedUser.lastName, updatedUser.email, updatedUser.phoneNumber, updatedUser.role, updatedUser.status] : user\n//     );\n//     const updatedAllUsers = allUsers.map((user) =>\n//       user[0] === updatedUser.user_id ? [updatedUser.user_id, updatedUser.firstName, updatedUser.lastName, updatedUser.email, updatedUser.phoneNumber, updatedUser.role, updatedUser.status] : user\n//     );\n//     setUsers(updatedUsers);\n//     setAllUsers(updatedAllUsers);\n//   };\n\n//   const handleConfirmDelete = (deletedUser) => {\n//     const filteredUsers = users.filter(user => user[0] !== deletedUser.user_id);\n//     const filteredAllUsers = allUsers.filter(user => user[0] !== deletedUser.user_id);\n//     setUsers(filteredUsers);\n//     setAllUsers(filteredAllUsers);\n//   };\n\n//   return (\n//     <div className=\"users\">\n//       <div className=\"users-heading\">\n//         <div className='users-page-header'>Users</div>\n//         <div className=\"users-search-add\">\n//           <div className=\"users-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Username / Email / Role\"\n//               className=\"users-search-input\"\n//             />\n//             <FaSearch className=\"users-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//             <button className=\"users__add-new-button\" onClick={() => setShowAddNewUser(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"users__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Status</th>\n//             {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {users.length > 0 ? (\n//               users.map((user, index) => (\n//                 <tr key={index}>\n//                   <td>{user[1]} {user[2]}</td>\n//                   <td className=\"email-cell\">\n//                     <div className=\"email-tooltip\">\n//                       {user[3].length > 30 ? `${user[3].substring(0, 30)}...` : user[3]}\n//                       <span className=\"email-tooltip-text\">{user[3]}</span>\n//                     </div>\n//                     <input type=\"text\" value={user[3]} readOnly className=\"full-email-input\" />\n//                   </td>\n//                   <td>{user[5]}</td>\n//                   <td className={user[6] === 'Active' ? 'active-status' : ''}>{user[6]}</td>\n//                   {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//                     <td>\n//                       <button className=\"users__edit-button\" onClick={() => handleEditUser(user)}><FaEdit /> Edit</button>\n//                       {userRole === roles.SUPER_ADMIN && (\n//                         <button className=\"users__delete-button\" onClick={() => handleDeleteUser(user)}><FaTrash /> Delete</button>\n//                       )}\n//                     </td>\n//                   )}\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) ? \"5\" : \"4\"}>No users found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewUser && (\n//         <AddNewUser\n//           onClose={() => setShowAddNewUser(false)}\n//           onAddUser={handleAddUser}\n//         />\n//       )}\n//       {showEditUser && (\n//         <EditUser\n//           onClose={() => setShowEditUser(false)}\n//           user={currentUser}\n//           onEditUser={handleUpdateUser}\n//         />\n//       )}\n//       {showDeleteUser && (\n//         <DeleteUser\n//           onClose={() => setShowDeleteUser(false)}\n//           user={currentUser}\n//           onDelete={handleConfirmDelete}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Users;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Users.css';\n// import { FaEdit, FaTrash, FaSearch } from 'react-icons/fa';\n// import AddNewUser from './AddNewUser';\n// import EditUser from './EditUser';\n// import DeleteUser from './DeleteUser';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPER_ADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Users() {\n//   const [users, setUsers] = useState([]);\n//   const [allUsers, setAllUsers] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewUser, setShowAddNewUser] = useState(false);\n//   const [showEditUser, setShowEditUser] = useState(false);\n//   const [showDeleteUser, setShowDeleteUser] = useState(false);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchAllUsers();\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchAllUsers = async () => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_users`);\n//       const data = await response.json();\n//       if (data.body.status === 'SUCCESS') {\n//         setAllUsers(data.body.data);\n//         setUsers(data.body.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.body.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredUsers = async (term) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_user?search=${term}`);\n//       const data = await response.json();\n//       if (data.body.status === 'SUCCESS') {\n//         setUsers(data.body.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.body.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const debouncedFetchFilteredUsers = useCallback(debounce(fetchFilteredUsers, 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredUsers(value);\n//   };\n\n//   const handleEditUser = (user) => {\n//     setCurrentUser(user);\n//     setShowEditUser(true);\n//   };\n\n//   const handleDeleteUser = (user) => {\n//     setCurrentUser(user);\n//     setShowDeleteUser(true);\n//   };\n\n//   const handleAddUser = (newUser) => {\n//     setUsers([...users, newUser]);\n//     setAllUsers([...allUsers, newUser]);\n//   };\n\n//   const handleUpdateUser = (updatedUser) => {\n//     const updatedUsers = users.map((user) =>\n//       user.userID === updatedUser.userID ? updatedUser : user\n//     );\n//     const updatedAllUsers = allUsers.map((user) =>\n//       user.userID === updatedUser.userID ? updatedUser : user\n//     );\n//     setUsers(updatedUsers);\n//     setAllUsers(updatedAllUsers);\n//   };\n\n//   const handleConfirmDelete = (deletedUser) => {\n//     const filteredUsers = users.filter(user => user.userID !== deletedUser.userID);\n//     const filteredAllUsers = allUsers.filter(user => user.userID !== deletedUser.userID);\n//     setUsers(filteredUsers);\n//     setAllUsers(filteredAllUsers);\n//   };\n\n//   return (\n//     <div className=\"users\">\n//       <div className=\"users-heading\">\n//         <div className='users-page-header'>Users</div>\n//         <div className=\"users-search-add\">\n//           <div className=\"users-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Username / Email / Role\"\n//               className=\"users-search-input\"\n//             />\n//             <FaSearch className=\"users-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//             <button className=\"users__add-new-button\" onClick={() => setShowAddNewUser(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"users__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Status</th>\n//             {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {users.length > 0 ? (\n//               users.map((user, index) => (\n//                 <tr key={index}>\n//                   <td>{user.firstName} {user.lastName}</td>\n//                   <td className=\"email-cell\">\n//                     <div className=\"email-tooltip\">\n//                       {user.email.length > 30 ? `${user.email.substring(0, 30)}...` : user.email}\n//                       <span className=\"email-tooltip-text\">{user.email}</span>\n//                     </div>\n//                     <input type=\"text\" value={user.email} readOnly className=\"full-email-input\" />\n//                   </td>\n//                   <td>{user.role}</td>\n//                   <td className={user.status === 'Active' ? 'active-status' : ''}>{user.status}</td>\n//                   {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//                     <td>\n//                       <button className=\"users__edit-button\" onClick={() => handleEditUser(user)}><FaEdit /> Edit</button>\n//                       {userRole === roles.SUPER_ADMIN && (\n//                         <button className=\"users__delete-button\" onClick={() => handleDeleteUser(user)}><FaTrash /> Delete</button>\n//                       )}\n//                     </td>\n//                   )}\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) ? \"5\" : \"4\"}>No users found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewUser && (\n//         <AddNewUser\n//           onClose={() => setShowAddNewUser(false)}\n//           onAddUser={handleAddUser}\n//         />\n//       )}\n//       {showEditUser && (\n//         <EditUser\n//           onClose={() => setShowEditUser(false)}\n//           user={currentUser}\n//           onEditUser={handleUpdateUser}\n//         />\n//       )}\n//       {showDeleteUser && (\n//         <DeleteUser\n//           onClose={() => setShowDeleteUser(false)}\n//           user={currentUser}\n//           onDelete={handleConfirmDelete}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Users;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import './Users.css';\n// import { FaEdit, FaTrash, FaSearch } from 'react-icons/fa';\n// import AddNewUser from './AddNewUser';\n// import EditUser from './EditUser';\n// import DeleteUser from './DeleteUser';\n// import Spinner from './Spinner'; // Import Spinner\n\n// const roles = {\n//   SUPER_ADMIN: 'SuperAdmin',\n//   ADMIN: 'Admin',\n//   WRITE: 'Write',\n//   READ: 'Read',\n// };\n\n// function Users() {\n//   const [users, setUsers] = useState([]);\n//   const [allUsers, setAllUsers] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [showAddNewUser, setShowAddNewUser] = useState(false);\n//   const [showEditUser, setShowEditUser] = useState(false);\n//   const [showDeleteUser, setShowDeleteUser] = useState(false);\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [loading, setLoading] = useState(false); // State for loading\n//   const [userRole, setUserRole] = useState(null);\n\n//   useEffect(() => {\n//     fetchAllUsers();\n//     const userData = JSON.parse(localStorage.getItem('userData'));\n//     if (userData) {\n//       setUserRole(userData[6]);\n//     }\n//   }, []);\n\n//   const fetchAllUsers = async () => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/list_users`);\n//       const data = await response.json();\n//       if (data.body.status === 'SUCCESS') {\n//         setAllUsers(data.body.data);\n//         setUsers(data.body.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.body.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const fetchFilteredUsers = async (term) => {\n//     setLoading(true); // Start loading\n//     try {\n//       const response = await fetch(`/filter_user?search=${term}`);\n//       const data = await response.json();\n//       if (data.body.status === 'SUCCESS') {\n//         setUsers(data.body.data);\n//       } else {\n//         console.error('Failed to fetch users:', data.body.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching users:', error);\n//     } finally {\n//       setLoading(false); // Stop loading\n//     }\n//   };\n\n//   const debouncedFetchFilteredUsers = useCallback(debounce(fetchFilteredUsers, 300), []);\n\n//   const handleSearchChange = (e) => {\n//     const { value } = e.target;\n//     setSearchTerm(value);\n//     debouncedFetchFilteredUsers(value);\n//   };\n\n//   const handleEditUser = (user) => {\n//     setCurrentUser(user);\n//     setShowEditUser(true);\n//   };\n\n//   const handleDeleteUser = (user) => {\n//     setCurrentUser(user);\n//     setShowDeleteUser(true);\n//   };\n\n//   const handleAddUser = (newUser) => {\n//     fetchAllUsers(); // Re-fetch user list after adding a new user\n//   };\n\n//   const handleUpdateUser = (updatedUser) => {\n//     const updatedUsers = users.map((user) =>\n//       user.userID === updatedUser.userID ? updatedUser : user\n//     );\n//     const updatedAllUsers = allUsers.map((user) =>\n//       user.userID === updatedUser.userID ? updatedUser : user\n//     );\n//     setUsers(updatedUsers);\n//     setAllUsers(updatedAllUsers);\n//   };\n\n//   const handleConfirmDelete = (deletedUser) => {\n//     const filteredUsers = users.filter(user => user.userID !== deletedUser.userID);\n//     const filteredAllUsers = allUsers.filter(user => user.userID !== deletedUser.userID);\n//     setUsers(filteredUsers);\n//     setAllUsers(filteredAllUsers);\n//   };\n\n//   return (\n//     <div className=\"users\">\n//       <div className=\"users-heading\">\n//         <div className='users-page-header'>Users</div>\n//         <div className=\"users-search-add\">\n//           <div className=\"users-search-wrapper\">\n//             <input\n//               type=\"text\"\n//               value={searchTerm}\n//               onChange={handleSearchChange}\n//               placeholder=\"Search By Username / Email / Role\"\n//               className=\"users-search-input\"\n//             />\n//             <FaSearch className=\"users-search-icon\" />\n//           </div>\n//           {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//             <button className=\"users__add-new-button\" onClick={() => setShowAddNewUser(true)}>+ Add New</button>\n//           )}\n//         </div>\n//       </div>\n//       <table className=\"users__content-table\">\n//         <thead>\n//           <tr>\n//             <th>Username</th>\n//             <th>Email</th>\n//             <th>Role</th>\n//             <th>Status</th>\n//             {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && <th>Action</th>}\n//           </tr>\n//         </thead>\n//         {loading ? (\n//           <div className=\"loader\">\n//             <Spinner />\n//           </div>\n//         ) : (\n//           <tbody>\n//             {users.length > 0 ? (\n//               users.map((user, index) => (\n//                 <tr key={index}>\n//                   <td>{user.firstName} {user.lastName}</td>\n//                   <td className=\"email-cell\">\n//                     <div className=\"email-tooltip\">\n//                       {user.email.length > 30 ? `${user.email.substring(0, 30)}...` : user.email}\n//                       <span className=\"email-tooltip-text\">{user.email}</span>\n//                     </div>\n//                     <input type=\"text\" value={user.email} readOnly className=\"full-email-input\" />\n//                   </td>\n//                   <td>{user.role}</td>\n//                   <td className={user.status === 'Active' ? 'active-status' : ''}>{user.status}</td>\n//                   {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n//                     <td>\n//                       <button className=\"users__edit-button\" onClick={() => handleEditUser(user)}><FaEdit /> Edit</button>\n//                       {userRole === roles.SUPER_ADMIN && (\n//                         <button className=\"users__delete-button\" onClick={() => handleDeleteUser(user)}><FaTrash /> Delete</button>\n//                       )}\n//                     </td>\n//                   )}\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan={(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) ? \"5\" : \"4\"}>No users found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         )}\n//       </table>\n//       {showAddNewUser && (\n//         <AddNewUser\n//           onClose={() => setShowAddNewUser(false)}\n//           onAddUser={handleAddUser}\n//         />\n//       )}\n//       {showEditUser && (\n//         <EditUser\n//           onClose={() => setShowEditUser(false)}\n//           user={currentUser}\n//           onEditUser={handleUpdateUser}\n//         />\n//       )}\n//       {showDeleteUser && (\n//         <DeleteUser\n//           onClose={() => setShowDeleteUser(false)}\n//           user={currentUser}\n//           onDelete={handleConfirmDelete}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// function debounce(func, wait) {\n//   let timeout;\n//   return function (...args) {\n//     const later = () => {\n//       clearTimeout(timeout);\n//       func(...args);\n//     };\n//     clearTimeout(timeout);\n//     timeout = setTimeout(later, wait);\n//   };\n// }\n\n// export default Users;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './Users.css';\nimport { FaEdit, FaTrash, FaSearch } from 'react-icons/fa';\nimport AddNewUser from './AddNewUser';\nimport EditUser from './EditUser';\nimport DeleteUser from './DeleteUser';\nimport Spinner from './Spinner'; // Import Spinner\n\nconst roles = {\n  SUPER_ADMIN: 'SuperAdmin',\n  ADMIN: 'Admin',\n  WRITE: 'Write',\n  READ: 'Read',\n};\n\nfunction Users() {\n  const [users, setUsers] = useState([]);\n  const [allUsers, setAllUsers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showAddNewUser, setShowAddNewUser] = useState(false);\n  const [showEditUser, setShowEditUser] = useState(false);\n  const [showDeleteUser, setShowDeleteUser] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(false); // State for loading\n  const [userRole, setUserRole] = useState(null);\n\n  useEffect(() => {\n    fetchAllUsers();\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (userData) {\n      setUserRole(userData[6]);\n    }\n  }, []);\n\n  const fetchAllUsers = async () => {\n    setLoading(true); // Start loading\n    try {\n      const response = await fetch(`/list_users`);\n      const data = await response.json();\n      if (data.body.status === 'SUCCESS') {\n        setAllUsers(data.body.data);\n        setUsers(data.body.data);\n      } else {\n        console.error('Failed to fetch users:', data.body.data);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  const fetchFilteredUsers = async (term) => {\n    setLoading(true); // Start loading\n    try {\n      const response = await fetch(`/filter_user?search=${term}`);\n      const data = await response.json();\n      if (data.body.status === 'SUCCESS') {\n        setUsers(data.body.data);\n      } else {\n        console.error('Failed to fetch users:', data.body.data);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  const debouncedFetchFilteredUsers = useCallback(debounce(fetchFilteredUsers, 300), []);\n\n  const handleSearchChange = (e) => {\n    const { value } = e.target;\n    setSearchTerm(value);\n    debouncedFetchFilteredUsers(value);\n  };\n\n  const handleEditUser = (user) => {\n    setCurrentUser(user);\n    setShowEditUser(true);\n  };\n\n  const handleDeleteUser = (user) => {\n    setCurrentUser(user);\n    setShowDeleteUser(true);\n  };\n\n  const handleAddUser = (newUser) => {\n    fetchAllUsers(); // Re-fetch user list after adding a new user\n  };\n\n  const handleUpdateUser = (updatedUser) => {\n    const updatedUsers = users.map((user) =>\n      user.userID === updatedUser.userID ? updatedUser : user\n    );\n    const updatedAllUsers = allUsers.map((user) =>\n      user.userID === updatedUser.userID ? updatedUser : user\n    );\n    setUsers(updatedUsers);\n    setAllUsers(updatedAllUsers);\n  };\n\n  const handleConfirmDelete = (deletedUser) => {\n    const filteredUsers = users.filter(user => user.userID !== deletedUser.userID);\n    const filteredAllUsers = allUsers.filter(user => user.userID !== deletedUser.userID);\n    setUsers(filteredUsers);\n    setAllUsers(filteredAllUsers);\n  };\n\n  return (\n    <div className=\"users\">\n      <div className=\"users-heading\">\n        <div className='users-page-header'>Users</div>\n        <div className=\"users-search-add\">\n          <div className=\"users-search-wrapper\">\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={handleSearchChange}\n              placeholder=\"Search By Username / Email / Role\"\n              className=\"users-search-input\"\n            />\n            <FaSearch className=\"users-search-icon\" />\n          </div>\n          {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n            <button className=\"users__add-new-button\" onClick={() => setShowAddNewUser(true)}>+ Add New</button>\n          )}\n        </div>\n      </div>\n      <table className=\"users__content-table\">\n        <thead>\n          <tr>\n            <th>Username</th>\n            <th>Email</th>\n            <th>Role</th>\n            <th>Status</th>\n            {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && <th>Action</th>}\n          </tr>\n        </thead>\n        {loading ? (\n          <div className=\"loader\">\n            <Spinner />\n          </div>\n        ) : (\n          <tbody>\n            {users.length > 0 ? (\n              users.map((user, index) => (\n                <tr key={index}>\n                  <td>{user.firstName} {user.lastName}</td>\n                  <td className=\"email-cell\">\n                    <div className=\"email-tooltip\">\n                      {user.email.length > 30 ? `${user.email.substring(0, 30)}...` : user.email}\n                      <span className=\"email-tooltip-text\">{user.email}</span>\n                    </div>\n                    <input type=\"text\" value={user.email} readOnly className=\"full-email-input\" />\n                  </td>\n                  <td>{user.role}</td>\n                  <td className={user.status === 'Active' ? 'active-status' : ''}>{user.status}</td>\n                  {(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) && (\n                    <td>\n                      <button className=\"users__edit-button\" onClick={() => handleEditUser(user)}><FaEdit /> Edit</button>\n                      {userRole === roles.SUPER_ADMIN && (\n                        <button className=\"users__delete-button\" onClick={() => handleDeleteUser(user)}><FaTrash /> Delete</button>\n                      )}\n                    </td>\n                  )}\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan={(userRole === roles.SUPER_ADMIN || userRole === roles.ADMIN) ? \"5\" : \"4\"}>No users found</td>\n              </tr>\n            )}\n          </tbody>\n        )}\n      </table>\n      {showAddNewUser && (\n        <AddNewUser\n          onClose={() => setShowAddNewUser(false)}\n          onAddUser={handleAddUser}\n        />\n      )}\n      {showEditUser && (\n        <EditUser\n          onClose={() => setShowEditUser(false)}\n          user={currentUser}\n          onEditUser={handleUpdateUser}\n          fetching = {fetchAllUsers}\n        />\n      )}\n      {showDeleteUser && (\n        <DeleteUser\n          onClose={() => setShowDeleteUser(false)}\n          user={currentUser}\n          onDelete={handleConfirmDelete}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction debounce(func, wait) {\n  let timeout;\n  return function (...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nexport default Users;\n"],"names":["Spinner","_jsx","className","_ref","onClose","onAddUser","formData","setFormData","useState","firstName","lastName","email","phoneNumber","password","confirmPassword","role","status","errors","setErrors","passwordMatch","invalidPhoneNumber","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","handleChange","e","name","value","target","isValidPhoneNumber","test","children","_jsxs","onClick","onSubmit","async","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","alert","message","error","console","type","onChange","required","placeholder","FaEye","FaEyeSlash","disabled","user","onEditUser","fetching","useEffect","user_id","userID","onDelete","roles","users","setUsers","allUsers","setAllUsers","searchTerm","setSearchTerm","showAddNewUser","setShowAddNewUser","showEditUser","setShowEditUser","showDeleteUser","setShowDeleteUser","currentUser","setCurrentUser","loading","setLoading","userRole","setUserRole","fetchAllUsers","userData","parse","localStorage","getItem","debouncedFetchFilteredUsers","useCallback","func","wait","timeout","_len","arguments","length","args","Array","_key","later","clearTimeout","setTimeout","debounce","concat","term","FaSearch","map","index","substring","readOnly","handleEditUser","FaEdit","handleDeleteUser","FaTrash","colSpan","AddNewUser","newUser","EditUser","updatedUser","updatedUsers","updatedAllUsers","DeleteUser","deletedUser","filteredUsers","filter","filteredAllUsers"],"sourceRoot":""}